<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[RSS Feed of 영의 시간]]></title><description><![CDATA[Web Front-end Developer ´◡`]]></description><link>https://6h15m.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 06 Apr 2022 14:35:22 GMT</lastBuildDate><item><title><![CDATA[RxJS OVERVIEW 번역]]></title><description><![CDATA[프롤로그 안녕하세요! 제로입니다.
최근 RxJS를 사용할 일이 생겨 열심히 학습하던 중, Learn RxJS 라는 문서를 발견해 번역해보고 있었어요.
공식 문서보다 조금 더 알기 쉽게 설명되어 있는 것 같아 학습에 큰 도움이 되었지만,
v…]]></description><link>https://6h15m.github.io/rxjs-overview/</link><guid isPermaLink="false">https://6h15m.github.io/rxjs-overview/</guid><pubDate>Wed, 06 Apr 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;프롤로그&lt;/h2&gt;
&lt;p&gt;안녕하세요! 제로입니다.
최근 RxJS를 사용할 일이 생겨 열심히 학습하던 중, &lt;a href=&quot;https://www.learnrxjs.io/&quot;&gt;Learn RxJS&lt;/a&gt; 라는 문서를 발견해 번역해보고 있었어요.
공식 문서보다 조금 더 알기 쉽게 설명되어 있는 것 같아 학습에 큰 도움이 되었지만,
v6 이후로 업데이트되지 않아 deprecated 된 자료들이 꽤 많았습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://chasethestar.gitbook.io/ko.learn-rxjs&quot;&gt;저희의 Learn RxJS&lt;/a&gt; 가 정확한 학습 자료로 거듭나려면
&lt;strong&gt;공식 문서를 먼저 학습해야겠다&lt;/strong&gt;는 판단이 생기게 되었고, &lt;a href=&quot;https://rxjs.dev/guide/overview&quot;&gt;OVERVIEW&lt;/a&gt;에 해당하는 영역부터 번역&lt;del&gt;(의역)&lt;/del&gt;해나가 보려고 합니다.&lt;/p&gt;
&lt;h2&gt;RxJS 소개&lt;/h2&gt;
&lt;p&gt;RxJS는 &lt;a href=&quot;https://rxjs.dev/guide/observable&quot;&gt;Observable(옵저버블)&lt;/a&gt; 시퀀스를 이용해 비동기 및 이벤트 기반 프로그램을 구성하기 위한 라이브러리입니다.
옵저버블, 옵저버블에 종속되는 타입들(Observer, Schedulers, Subjects),
&lt;code class=&quot;language-text&quot;&gt;Array&lt;/code&gt; 메소드(&lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;reduce&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;every&lt;/code&gt; 등)에서 영감받은 Operator(연산자)를 제공하여
비동기 이벤트를 콜렉션처럼 다룰 수 있게 하죠.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이벤트 처리를 위한 Lodash, &lt;strong&gt;RxJS&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ReactiveX는 이벤트 시퀀스를 관리하는 이상적인 방법으로 &lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;옵저버 패턴&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Iterator_pattern&quot;&gt;이터레이터 패턴&lt;/a&gt;,
&lt;a href=&quot;http://martinfowler.com/articles/collection-pipeline/#NestedOperatorExpressions&quot;&gt;콜렉션을 다루는 함수형 프로그래밍&lt;/a&gt; 을 결합하는 것을 택했습니다.&lt;/p&gt;
&lt;h3&gt;비동기 이벤트를 관리하는 RxJS의 필수 개념&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Observable&lt;/strong&gt; - &lt;code class=&quot;language-text&quot;&gt;옵저버블&lt;/code&gt;: 호출 가능한 미래의 값 또는 이벤트에 대한 집합&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Observer&lt;/strong&gt; - &lt;code class=&quot;language-text&quot;&gt;옵저버&lt;/code&gt;: 옵저버블이 제공하는 값을 소비할 수 있는 콜백 함수의 집합&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subscription&lt;/strong&gt; - &lt;code class=&quot;language-text&quot;&gt;구독&lt;/code&gt;: 옵저버블의 실행&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operators&lt;/strong&gt; - &lt;code class=&quot;language-text&quot;&gt;연산자&lt;/code&gt;: &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;concat&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;reduce&lt;/code&gt; 같은 연산으로 컬렉션을 처리(함수형 프로그래밍 스타일)하는 순수함수&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subject&lt;/strong&gt; - &lt;code class=&quot;language-text&quot;&gt;서브젝트&lt;/code&gt;: EventEmitter와 동일하게, 값 또는 이벤트를 여러 옵저버에 멀티캐스팅할 수 있게 하는 옵저버블의 한 종류&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Schedulers&lt;/strong&gt; - &lt;code class=&quot;language-text&quot;&gt;스케쥴러&lt;/code&gt;: 동시성을 제어하는 중앙 집중적인 스케쥴러(예: &lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt; 또는 &lt;code class=&quot;language-text&quot;&gt;requestAnimationFrame&lt;/code&gt; 등의 연산이 발생했을 때 조정이 가능하게 함)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;예제로 알아보는 RxJS&lt;/h2&gt;
&lt;p&gt;보통은, 이벤트 리스너를 등록하죠.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-ts line-numbers&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;클릭하셨네요!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RxJS를 사용한다면 이벤트 리스너 대신 옵저버블을 생성합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-ts line-numbers&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fromEvent &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rxjs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;fromEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;클릭하셨네요!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;순수성&lt;/h3&gt;
&lt;p&gt;RxJS가 강력한 이유는 순수함수를 이용해 값을 생성할 수 있기 때문입니다.
이는 오류가 발생할 가능성이 낮다는 뜻이죠.&lt;/p&gt;
&lt;p&gt;일반적으로 우리는 &apos;순수하지 않은&apos;, 다른 상태까지 망칠 수 있는 함수를 생성합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-ts line-numbers&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;번이나 클릭하셨군요!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RxJS를 사용한다면 상태는 서로 격리됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-ts line-numbers&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fromEvent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scan &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rxjs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;fromEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;번이나 클릭하셨군요!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;scan&lt;/strong&gt; 연산자는 배열의 &lt;strong&gt;reduce&lt;/strong&gt;와 유사하게 동작해,
리턴된 콜백 함수의 값은 다음 콜백 함수의 매개 변수가 됩니다.&lt;/p&gt;
&lt;h3&gt;유동성&lt;/h3&gt;
&lt;p&gt;RxJS의 연산자들은 옵저버블을 통과하는 이벤트들의 흐름을 제어합니다. (종류도 다양하죠!)&lt;/p&gt;
&lt;p&gt;Plain JavaScript로 초당 최대 한 번으로 클릭을 제한하는 기능을 구현해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-ts line-numbers&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; rate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; lastClick &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; rate&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; lastClick &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; rate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;번 클릭하셨어요!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    lastClick &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RxJS로도 구현해볼게요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-ts line-numbers&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fromEvent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; throttleTime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scan &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rxjs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;fromEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;throttleTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;번 클릭하셨어요!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다른 흐름 제어 연산자에는 &lt;a href=&quot;https://rxjs.dev/api/operators/filter&quot;&gt;&lt;strong&gt;filter&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;https://rxjs.dev/api/operators/delay&quot;&gt;&lt;strong&gt;delay&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;https://rxjs.dev/api/operators/debounceTime&quot;&gt;&lt;strong&gt;debounceTime&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;https://rxjs.dev/api/operators/take&quot;&gt;&lt;strong&gt;take&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;https://rxjs.dev/api/operators/takeUntil&quot;&gt;&lt;strong&gt;takeUntil&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;https://rxjs.dev/api/operators/distinct&quot;&gt;&lt;strong&gt;distinct&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;https://rxjs.dev/api/operators/distinctUntilChanged&quot;&gt;&lt;strong&gt;distinctUntilChanged&lt;/strong&gt;&lt;/a&gt; 등이 있습니다.&lt;/p&gt;
&lt;h3&gt;값&lt;/h3&gt;
&lt;p&gt;RxJS에서는 옵저버블을 통과하는 값들을 변환할 수 있습니다.&lt;/p&gt;
&lt;p&gt;Plain JavaScript로 클릭할 때마다 현재 마우스의 x 좌표를 더하는 기능을 구현해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-ts line-numbers&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; lastClick &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; rate&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; lastClick &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; rate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    count &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    lastClick &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RxJS로도 구현해볼게요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-ts line-numbers&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fromEvent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; throttleTime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; map&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scan &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rxjs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;fromEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;throttleTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientX&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; clientX&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; clientX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다른 값 관련 연산자에는 &lt;a href=&quot;https://rxjs.dev/api/operators/pluck&quot;&gt;&lt;strong&gt;pluck&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://rxjs.dev/api/operators/pairwise&quot;&gt;&lt;strong&gt;pairwise&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://rxjs.dev/api/operators/sample&quot;&gt;&lt;strong&gt;sample&lt;/strong&gt;&lt;/a&gt; 등이 있습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Github 프로필에 잔디 먹는 뱀 추가하기]]></title><description><![CDATA[프롤로그 안녕하세요! 제로입니다.
찬성 님의 facebook 포스팅을 보고 너무 신기해서 따라해보게 된 Github Action을 소개해 드릴게요. github-contribution-grid-snake 이번 포스팅에선, 저와 같이 Github…]]></description><link>https://6h15m.github.io/github-snake/</link><guid isPermaLink="false">https://6h15m.github.io/github-snake/</guid><pubDate>Tue, 20 Jul 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;프롤로그&lt;/h2&gt;
&lt;p&gt;안녕하세요! 제로입니다.
&lt;a href=&quot;https://www.facebook.com/Thomas.CS.Park/posts/10221387355058694&quot;&gt;찬성 님의 facebook 포스팅&lt;/a&gt;을 보고 너무 신기해서 따라해보게 된 Github Action을 소개해 드릴게요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/125471173-30203e61-5705-43f9-9a85-afa9d643d45a.gif&quot; alt=&quot;github-contribution-grid-snake&quot;&gt;&lt;/p&gt;
&lt;p&gt;이번 포스팅에선, 저와 같이 Github README 꾸미기에 진심인 분들을 위해 커밋 내역을 먹는 뱀🐍을 추가하는 방법을 알려드리겠습니다!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://platane.github.io/snk/&quot;&gt;데모 확인하기&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://github.com/Platane/snk&quot;&gt;GitHub 확인하기&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1. Github 프로필 README 생성&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt;에 &lt;strong&gt;Github 아이디&lt;/strong&gt;와 동일한 이름의 새 레포지토리를 생성합니다.
생성 이전에 &lt;strong&gt;Add a README file&lt;/strong&gt; 속성을 체크해 주세요.&lt;br&gt;
생성해서 해당 레포지토리에 들어가 보면, 이런 안내문이 보입니다.
&lt;br/&gt;&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/126091043-b18d702d-e01b-4a2b-9c5a-604c719de423.PNG&quot; alt=&quot;special&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Github 아이디를 이름으로 한 레포지토리는 특별한 레포지토리여서, 이 레포지토리의 README.md는
깃허브 프로필에서 보입니다. 이렇게요!&lt;br/&gt;&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/126091437-80f02fb3-8545-43e1-87ac-2ae6ee744561.PNG&quot; alt=&quot;기존 리드미&quot;&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Github 블로그를 썼던 것처럼 마크다운 문법을 쓰면 저처럼 다양하게 꾸며볼 수 있습니다. Google에 &lt;strong&gt;Github 프로필 꾸미기&lt;/strong&gt;로 검색하시면 방법을 많이 찾아볼 수 있습니다! 😁&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;2. Github Actions 추가&lt;/h2&gt;
&lt;h3&gt;Github Actions란?&lt;/h3&gt;
&lt;p&gt;본격적으로 뱀 GIF를 생성하기 위해 프로필 레포지토리에 Github Actions를 추가해야 합니다.
&lt;a href=&quot;https://github.com/features/actions&quot;&gt;Github Actions&lt;/a&gt;는 Github 이벤트를 기반으로 소프트웨어 workflow를 자동화할 수 있도록 하는 도구입니다. 더 자세히 알고 싶다면 &lt;a href=&quot;https://docs.github.com/en/actions/learn-github-actions&quot;&gt;공식 문서&lt;/a&gt;를 참고해 주세요.&lt;br&gt;
여기에선 특정 시간마다 자신의 커밋 내역에 맞게 GIF를 새로 생성하기 위해 사용합니다.&lt;br/&gt;&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/126317621-76ce7c5c-c4a2-45ca-a9dd-b5188b36d73c.PNG&quot; alt=&quot;yml 추가&quot;&gt;&lt;br/&gt;
위와 같이 &lt;code class=&quot;language-text&quot;&gt;.github&lt;/code&gt; 디렉토리를 만들고, 그 안에 &lt;code class=&quot;language-text&quot;&gt;workflows&lt;/code&gt; 디렉토리를 만들어주세요.
&lt;code class=&quot;language-text&quot;&gt;workflows&lt;/code&gt; 안에 &lt;code class=&quot;language-text&quot;&gt;snake.yml&lt;/code&gt;을 생성 후, 해당 내용을 작성해주세요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-text line-numbers&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# 커밋 먹는 뱀 그래프 생성을 위한 GitHub Action🐍

name: Generate Snake

# Action이 언제 구동될지 결정

on:
  schedule:
    # 6시간마다 한 번(수정 가능)
    - cron: &quot;0 */6 * * *&quot;

  # 자동으로 Action이 실행되도록 함
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # 뱀 생성
      - uses: Platane/snk@master
        id: snake-gif
        with:
          github_user_name: [Github 아이디]
          # output branch에 gif, svg를 각각 생성
          gif_out_path: dist/github-contribution-grid-snake.gif
          svg_out_path: dist/github-contribution-grid-snake.svg

      - run: git status

      # 변경사항 push
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: master
          force: true

      - uses: crazy-max/ghaction-github-pages@v2.1.3
        with:
          target_branch: output
          build_dir: dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
`github_user_name` 을 수정하시고, `schedule` 을 원하는 주기대로 설정 후 커밋해주세요.  
&lt;br/&gt;
다시 Github 레포지토리로 돌아와서, **Actions** 탭에 생성된 Workflow **Generate Snake**를 확인하세요! &lt;br/&gt;&lt;br/&gt;
![github actions](https://user-images.githubusercontent.com/52748335/126319031-eba35657-dfc2-4936-9a6d-bb0da9ccc385.PNG)&lt;br/&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Run workflow&lt;/code&gt; 를 선택해 실행해줍니다.&lt;br/&gt;&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/126319154-b4b6a0b4-e3fc-481e-95e7-fca8939263d5.PNG&quot; alt=&quot;run&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Actions 탭에서 실행이 잘 된 것을 확인할 수 있습니다.&lt;br/&gt;&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/126319484-f92f88f6-2eaa-42a3-b1a4-d78a5b1aa945.PNG&quot; alt=&quot;실행 완료&quot;&gt;&lt;/p&gt;
&lt;h2&gt;3. README 수정&lt;/h2&gt;
&lt;p&gt;이제 생성된 GIF 또는 SVG를 &lt;code class=&quot;language-text&quot;&gt;README.md&lt;/code&gt;에 추가해주는 일만 남았는데요,&lt;br&gt;
GIF 파일은 흰색 배경이어서 Default light 테마에 어울리고, &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/126324403-01747446-9a5d-410c-8bb5-96ca13e8a017.gif&quot; alt=&quot;github-contribution-grid-snake&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;SVG 파일은 배경이 없고 색이 조금 더 어두운 편이라 Dark high contrast 테마에 어울리는 것 같습니다. 원하는 대로 자유롭게 사용하시면 됩니다! 나중에 색상 커스텀 기능도 추가되면 좋을 것 같네요 ☺ &lt;br/&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/6h15m/6h15m/output/github-contribution-grid-snake.svg&quot; alt=&quot;snake gif&quot;&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-text line-numbers&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;![snake gif](https://github.com/[GitHub 아이디]/[GitHub 아이디]/blob/output/github-contribution-grid-snake.svg)&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;GitHub 아이디 수정 후&lt;/strong&gt; 해당 코드를 README.md의 원하는 부분에 추가해 주시면 됩니다. GIF 파일로 하고 싶으시면 파일 확장자만 gif로 변경해주세요!
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/126319766-dd6587fe-4b85-4dae-aa54-955b6525f30f.PNG&quot; alt=&quot;readme 추가&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;완성된 모습입니다 😊&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/126325009-491bfa72-fe43-4752-a249-93ed82bc621f.PNG&quot; alt=&quot;완성&quot;&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;참고한 문서&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.to/mishmanners/how-to-enable-github-actions-on-your-profile-readme-for-a-contribution-graph-4l66?fbclid=iwar2bgcj9b_0owzs_zr5e45y1nbir-9768lyzt1y5a7e4rd4dwwrtauuliss&quot;&gt;How to enable GitHub Actions on your Profile README for a snake-eating contribution graph 🐍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Github로 개발 블로그 개설하기 #2]]></title><description><![CDATA[프롤로그 안녕하세요! 제로입니다. 저번 포스팅에서는 Github Pages를 생성해보고, Ruby와 jekyll…]]></description><link>https://6h15m.github.io/github-blog-2/</link><guid isPermaLink="false">https://6h15m.github.io/github-blog-2/</guid><pubDate>Mon, 05 Jul 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;프롤로그&lt;/h2&gt;
&lt;p&gt;안녕하세요! 제로입니다.&lt;br&gt;
&lt;a href=&quot;https://6h15m.github.io/blog/2021/06/28/github-blog.html&quot;&gt;저번 포스팅&lt;/a&gt;에서는 Github Pages를 생성해보고, Ruby와 jekyll을 설치해 블로그에 테마를 적용해보았습니다.&lt;br&gt;
이번 포스팅에선 테마의 내용을 수정해 온전히 &apos;내 블로그&apos;처럼 만들어보고, 글을 작성해보고, 작성된 글에 댓글을 달아 의견을 나눌 수 있게끔 하는 방법을 알려드리려 합니다 😁&lt;/p&gt;
&lt;h2&gt;1. jekyll 테마 사용자화&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/124222304-7311d000-db3c-11eb-8db6-8b6db795d9ef.PNG&quot; alt=&quot;1&quot;&gt;&lt;br/&gt;
jekyll에선 테마를 커스텀하기 위해 &lt;a href=&quot;https://jekyllrb.com/docs/configuration/&quot;&gt;_config.yml&lt;/a&gt; 파일을 제공합니다.
프로젝트 폴더에서 _config.yml 파일을 찾아서 들어가봅시다.
&lt;br/&gt;&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/124222692-32ff1d00-db3d-11eb-96f6-4bce5e44722a.PNG&quot; alt=&quot;2&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;제 테마의 경우 이렇게 내용이 들어가 있었는데요, 주석으로 어디에 어떤 내용을 넣어야 하는지 친절하게 설명되어 있습니다. &lt;br/&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-text line-numbers&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;title: 영의 시간
author: 6h15m
email: 6h15m.develop@gmail.com
description: &gt;
  0년차 프론트엔드 개발자 성장기
show_excerpts: true
sass:
  sass_dir: _sass
plainwhite:
  name: 제로
  tagline: Front-end Developer ´◡`
  date_format: &quot;%b %-d, %Y&quot;
  sitemap: true
  search: true
  dark_mode: true
  portfolio_image: &quot;assets/portfolio.png&quot;
  html_lang: &quot;ko&quot;
  condensed_mobile:
    - page
    - post
  social_links:
    twitter: 20develop
    github:  6h15m
    facebook: 100007430927430
    email: 6h15m.devleop@gmail.com
theme: plainwhite

plugins:
  - jekyll-seo-tag&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;제가 커스텀한 _config.xml을 참고하여 작성해보셔도 좋을 것 같습니다.&lt;/p&gt;
&lt;h2&gt;2. 글 작성하기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/124423203-a56f3780-dd9f-11eb-972b-28984628656b.PNG&quot; alt=&quot;3&quot;&gt;&lt;br/&gt;
글은 &lt;strong&gt;_posts&lt;/strong&gt;폴더에 &lt;code class=&quot;language-text&quot;&gt;.md&lt;/code&gt; 형태의 파일로 씁니다. 없으면 같은 이름으로 생성해주세요.&lt;br&gt;
.md 파일의 이름은 &lt;strong&gt;yyyy-mm-dd-제목&lt;/strong&gt; 형태여야 합니다.&lt;/p&gt;
&lt;p&gt;글에 레이아웃과 제목, 카테고리, 날짜 등을 지정하기 위해 &lt;strong&gt;머릿글 생성&lt;/strong&gt;이 필요한데요, 제 테마는 이미 생성되어 있는 양식이 있어 내용만 교체하였습니다. 없으신 분들은 해당 테마의 readme.md를 참고하여 작성하시면 될 것 같습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-text line-numbers&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;---
layout: post
title:  &quot;📝 Github로 개발 블로그 개설하기 #1&quot;
date:   2021-06-28
categories: Blog
---&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;글 내용을 작성하기 위해선 &lt;strong&gt;마크다운 문법&lt;/strong&gt;을 알아야 하는데, 이 부분은 &lt;a href=&quot;https://gist.github.com/ihoneymon/652be052a0727ad59601&quot;&gt;Kim Ji-Heon 님의 정리자료&lt;/a&gt;와 &lt;a href=&quot;https://wikidocs.net/1678&quot;&gt;위키독스 마크다운 설명서&lt;/a&gt;를 참고하시면 좋을 것 같습니다. 저도 추후에 단독 포스팅으로 정리해볼 생각이지만요!&lt;br&gt;
&lt;del&gt;알아두면 Github readme를 꾸밀 때 매우 유용합니다 😙&lt;/del&gt; &lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;3. 댓글 기능 추가하기&lt;/h2&gt;
&lt;p&gt;처음엔 &lt;a href=&quot;https://disqus.com/&quot;&gt;disqus&lt;/a&gt;를 활용하여 댓글 기능을 추가해보았으나, 댓글 기록이 날아갈 수도 있고 블로그 로딩 속도가 느려진다는 글을 보아서, &lt;a href=&quot;https://utteranc.es/&quot;&gt;utterances&lt;/a&gt;로 교체해보았습니다. disqus에 비해 나은 점은 &lt;strong&gt;디자인이 깔끔&lt;/strong&gt;하고, &lt;strong&gt;Github Issue에 자동으로 저장&lt;/strong&gt;된다는 것이 있었습니다. 만약 댓글이 많이 달린다면 속도 차이도 체감할 수 있을 것 같네요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/124427642-9d66c600-dda6-11eb-833f-c845aa0277c0.PNG&quot; alt=&quot;7&quot;&gt;&lt;br/&gt;
Github apps에서 &lt;a href=&quot;https://github.com/apps/utterances&quot;&gt;utterances app&lt;/a&gt;을 찾아 블로그 레포지토리에 설치해줍니다.&lt;br&gt;
설치되면 &lt;a href=&quot;https://utteranc.es/&quot;&gt;utterances&lt;/a&gt; 페이지로 이동되는데, 이곳에서 Issue title의 매핑 방식과 label, 테마 등을 커스텀할 수 있습니다. 자신이 원하는 설정으로 커스텀해줍시다.&lt;br&gt;
저는 매핑 방식은 &apos;Issue title contains page title&apos;, label은 설정하지 않았고 테마는 &apos;Github Light&apos;로 설정했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-html line-numbers&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://utteranc.es/client.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;6h15m/6h15m.github.io&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;issue-term&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;github-light&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;crossorigin&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;anonymous&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;async&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런 식으로 커스텀되어 나온 코드를 &lt;code class=&quot;language-text&quot;&gt;_layouts&lt;/code&gt; 폴더의 댓글을 넣고 싶은 레이아웃 파일에 포함시켜 주면 댓글 기능이 추가됩니다.&lt;br&gt;
저는 포스팅된 글에만 댓글 기능을 추가하고 싶어서, &lt;code class=&quot;language-text&quot;&gt;post.html&lt;/code&gt;에만 이렇게 추가해보았습니다.
&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/124428938-36e2a780-dda8-11eb-875b-b470a069df6c.PNG&quot; alt=&quot;8&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;댓글을 작성해볼까요?
&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/124429177-81fcba80-dda8-11eb-8640-2963339895b9.PNG&quot; alt=&quot;4&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;잘 작성되네요!
&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/124429196-8923c880-dda8-11eb-9b33-fd1217a6c7a9.PNG&quot; alt=&quot;5&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;이렇게 Github Issues에도 잘 추가되는 모습을 볼 수 있습니다.
&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/124429271-9f318900-dda8-11eb-8def-da8e9c172141.PNG&quot; alt=&quot;6&quot;&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;다음 포스팅은&lt;/h2&gt;
&lt;p&gt;제가 생각해둔 내용은 모두 다룬 것 같아서 추가적인 커스텀(통계, 디자인 커스텀 등....)이 필요하다면 해볼 생각입니다. 추천하시는 커스텀 방향이 있으면 댓글로 남겨주세요!&lt;/p&gt;
&lt;br/&gt;</content:encoded></item><item><title><![CDATA[Github로 개발 블로그 개설하기 #1]]></title><description><![CDATA[프롤로그 안녕하세요! '영의 시간' 블로그 운영자 제로입니다. 그동안 티스토리를 이용해 개발 블로그를 운영해오다, 자유도 높게 커스텀할 수 있다는 깃허브 블로그의 장점에 반해 새롭게 개설해보게 되었습니다. 첫 글에서는 Github…]]></description><link>https://6h15m.github.io/github-blog-1/</link><guid isPermaLink="false">https://6h15m.github.io/github-blog-1/</guid><pubDate>Mon, 28 Jun 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;프롤로그&lt;/h2&gt;
&lt;p&gt;안녕하세요! &apos;영의 시간&apos; 블로그 운영자 제로입니다.&lt;br&gt;
그동안 티스토리를 이용해 개발 블로그를 운영해오다, 자유도 높게 커스텀할 수 있다는 깃허브 블로그의 장점에 반해 새롭게 개설해보게 되었습니다.&lt;br&gt;
첫 글에서는 Github 개발 블로그를 개설하고, 테마를 적용하는 방법을 알려드리려 합니다😊&lt;/p&gt;
&lt;h2&gt;1. Github 블로그 사이트 만들기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/123634195-1b7e1680-d855-11eb-8024-5753975ee141.PNG&quot; alt=&quot;1&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;블로그 사이트를 생성하기 위해, &lt;a href=&quot;https://pages.github.com&quot;&gt;Github pages&lt;/a&gt; 기능을 이용해볼 것입니다.&lt;br&gt;
해당 사진처럼 &lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt;에 새 레포지토리를 생성합니다.&lt;br&gt;
Repository name은 &lt;b&gt;[Github 아이디].github.io&lt;/b&gt; 로 해주세요. 이렇게 해야 Repository name과 같은 도메인으로 접속할 수 있습니다.
&lt;br/&gt;&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/123637165-ab718f80-d858-11eb-94ba-c3e21a6b3982.png&quot; alt=&quot;2&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;생성된 Repository의 Settings-Pages에 들어가보면 페이지가 잘 생성되었는지 확인할 수 있습니다.&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;2. Ruby, jekyll 설치&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;https://jekyllrb-ko.github.io/&quot;&gt;jekyll&lt;/a&gt;이란?&lt;/h3&gt;
&lt;p&gt;jekyll은 다양한 포맷의 텍스트 파일을 가공해서, 정적인 웹사이트로 만들어주는 Ruby 기반의 사이트 생성기입니다. markdown 문법을 지원하고, 블로그를 위한 다양한 테마가 존재하기 때문에 많이 사용되는 것 같아요. 자세한 내용을 알고 싶다면 &lt;a href=&quot;https://jekyllrb-ko.github.io/docs&quot;&gt;jekyll 문서&lt;/a&gt;에 상세하게 설명되어 있으니 참고해 보세요!&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;설치하기&lt;/h3&gt;
&lt;p&gt;jekyll을 사용하기 위해 먼저 Ruby를 설치해 보겠습니다. &lt;a href=&quot;https://www.ruby-lang.org/ko/downloads/&quot;&gt;Ruby 다운로드 링크&lt;/a&gt;를 참고하여 다운로드해 주세요. 저는 RubyInstaller &lt;a href=&quot;https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.7.3-1/rubyinstaller-devkit-2.7.3-1-x64.exe&quot;&gt;Ruby+Devkit 2.7.3-1 (x64)&lt;/a&gt; 버전을 이용하여 다운받았습니다.
&lt;br/&gt;&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/123639839-892d4100-d85b-11eb-9a59-32849bfe8b73.PNG&quot; alt=&quot;3&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;cmd에 &lt;code class=&quot;language-text&quot;&gt;ruby -v&lt;/code&gt; 명령어를 입력하면 잘 설치되었는지 확인할 수 있습니다.
&lt;br/&gt;&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/123641331-1f159b80-d85d-11eb-8d09-9a782d6d240f.PNG&quot; alt=&quot;4&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;이어서 &lt;code class=&quot;language-text&quot;&gt;gem install jekyll bundler&lt;/code&gt; 를 입력해 jekyll과 &lt;a href=&quot;https://jekyllrb-ko.github.io/docs/ruby-101/#bundler&quot;&gt;bundler&lt;/a&gt; &lt;a href=&quot;https://jekyllrb-ko.github.io/docs/ruby-101/#gems&quot;&gt;젬&lt;/a&gt;을 설치해줍니다.&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;3. jekyll 테마 적용&lt;/h2&gt;
&lt;h3&gt;테마 선정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jamstackthemes.dev/ssg/jekyll/&quot;&gt;jamstackthemes.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;jekyllthemes.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jekyllthemes.io/&quot;&gt;jekyllthemes.io&lt;/a&gt;(일부 유료)&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이외에도 다양한 테마가 있는데, 잘 찾아본 후 가장 마음에 드는 테마를 골라주세요.
저는 비교적 꾸준히 업데이트되고 있고, 디자인이 깔끔해보이는 &lt;a href=&quot;https://github.com/samarsault/plainwhite-jekyll&quot;&gt;plainwhite&lt;/a&gt; 테마를 사용하였습니다. 원래 다른 테마(persephone)을 사용하려 했는데 중국어로 구성되어 있어 알아보기 힘들었고, 현재의 테마로 교체하였습니다.&lt;/p&gt;
&lt;h3&gt;적용하기&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/123653761-6b1a0d80-d868-11eb-920a-3527031903d3.png&quot; alt=&quot;5&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;원하는 테마를 Clone해서, 1단계에서 만들었던 자신의 Repository에 가져옵니다. 전 ZIP 파일로 다운로드해 압축을 풀고 다시 제 프로젝트 폴더에 넣는 과정을 거쳤지만, 클론에는 다양한 방법이 있으니 다른 방법도 참고해 보시면 좋을 것 같습니다.
&lt;br/&gt;&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/123654467-11fea980-d869-11eb-97c2-ea2f95b7b40b.PNG&quot; alt=&quot;6&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;터미널에 &lt;code class=&quot;language-text&quot;&gt;bundle exec jekyll serve&lt;/code&gt; 라고 입력하면 저의 경우 에러가 났습니다. 이런 경우 터미널에서 알려주는 대로 &lt;code class=&quot;language-text&quot;&gt;bundle install&lt;/code&gt; 을 입력하고, 다시 &lt;code class=&quot;language-text&quot;&gt;bundle exec jekyll serve&lt;/code&gt; 를 해주면 해결되었습니다.&lt;/p&gt;
&lt;h3&gt;에러 발생 사례&lt;/h3&gt;
&lt;p&gt;종종 본인이 세팅한 jekyll의 버전이 다운받은 테마의 jekyll 버전과 달라서 에러가 발생하기도 합니다. 그럴 땐 Gemfile.lock 파일을 삭제하고, &lt;code class=&quot;language-text&quot;&gt;bundle install&lt;/code&gt; 을 입력하면 다시 Gemfile.lock을 만들며 테마가 적용된 사이트의 jekyll 버전이 변경됩니다.&lt;/p&gt;
&lt;p&gt;세팅된 jekyll 버전을 바꾸고 싶다면 &lt;code class=&quot;language-text&quot;&gt;gem install bundler -v [설치할 버전]&lt;/code&gt; 으로 바꿀 버전을 설치해주고, &lt;code class=&quot;language-text&quot;&gt;gem uninstall bundler -v [삭제할 버전]&lt;/code&gt; 으로 기존 버전을 삭제해주면 됩니다.&lt;/p&gt;
&lt;h3&gt;접속&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/52748335/123655881-5e96b480-d86a-11eb-8983-4d50ee677483.PNG&quot; alt=&quot;7&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;잘 따라오셨다면 &lt;a href=&quot;http://localhost:4000%EC%9C%BC%EB%A1%9C&quot;&gt;http://localhost:4000으로&lt;/a&gt; 접속했을 시, 테마의 기본적인 레이아웃이 보일 것입니다.&lt;/p&gt;
&lt;p&gt;만약 &lt;b&gt;index of /&lt;/b&gt; 같은 엉뚱한 페이지가 보인다면, _layouts 폴더에서 main으로 사용하고 싶은 레이아웃을 가져와 프로젝트 폴더에 index.md를 만들어줘야 합니다. 예시를 보여드리겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-text line-numbers&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;---
layout: home
---&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;h2&gt;다음 포스팅은&lt;/h2&gt;
&lt;p&gt;jekyll 테마를 사용자화하는 방법, 글을 작성하는 방법(마크다운 문법은 다루지 않을 예정입니다)과 댓글 기능을 추가하는 방법에 대해 다룰 예정입니다.&lt;/p&gt;
&lt;p&gt;감사합니다! 😚&lt;/p&gt;</content:encoded></item></channel></rss>