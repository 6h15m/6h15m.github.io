{"version":3,"file":"component---src-templates-post-tsx-c8ec3d4ac793cb681516.js","mappings":"iKAwHA,UAhDa,SAAC,GAAqB,IAAnBA,EAAkB,EAAlBA,KACRC,EAAOD,EAAKE,eACVC,EAA+BH,EAA/BG,SAAUC,EAAqBJ,EAArBI,KAAMC,EAAeL,EAAfK,WAExB,EAAmDJ,EAAKK,YAAhDC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,OAAQC,EAAnC,EAAmCA,YACnC,EAA8BV,EAAKW,OAA3BC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,KAEjBC,EAAgC,GAiBpC,OAhBe,OAAXL,IACFK,EAAiBV,EAAWW,MAAMC,KAAI,SAACC,GACrC,OAAIA,EAAWC,KAAKC,KAAOnB,EAAKmB,GACvB,OAAP,UACKF,EAAWC,KADhB,CAEEE,aAAa,IAGR,OAAP,UACKH,EAAWC,KADhB,CAEEE,aAAa,QAOnBC,EAAAA,cAACC,EAAAA,GAAD,KACED,EAAAA,cAACE,EAAAA,GAAD,CACEjB,MAAOA,EACPI,YAAaA,EACbc,IAAG,GAAKC,EAAAA,EAAAA,QAAqBZ,IAE/BQ,EAAAA,cAACK,EAAAA,GAAAA,GAAD,KACEL,EAAAA,cAACK,EAAAA,GAAAA,GAAD,CACEpB,MAAOA,EACPC,KAAMA,EACNC,KAAMA,EACNmB,UAAWC,KAAKC,MAAMjB,EAAYkB,WAEnChB,EAAeiB,OAAS,GACvBV,EAAAA,cAACK,EAAAA,GAAAA,GAAD,CAAgBM,OAAQvB,EAAQA,OAAQK,IAE1CO,EAAAA,cAACK,EAAAA,GAAAA,GAAD,CAAcO,KAAMjC,EAAKiC,OACzBZ,EAAAA,cAACK,EAAAA,GAAAA,GAAD,CAAgBxB,SAAUA,EAAUC,KAAMA","sources":["webpack://6h15m.github.io/./src/templates/Post.tsx"],"sourcesContent":["import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport BlogConfig from \"../../blog-config\";\nimport { Layout, Article, SEO } from \"../components\";\n\ntype Tag = {\n  fieldValue: string;\n  totalCount: number;\n};\n\ntype Article = {\n  fields: {\n    slug: string;\n  };\n  frontmatter: {\n    title: string;\n  };\n};\n\ntype Frontmatter = {\n  date: string;\n  update: string;\n  title: string;\n  tags: Array<Tag>;\n  series: string;\n  description: string | null;\n};\n\ntype SeriesPost = {\n  node: {\n    id: string;\n    fields: {\n      slug: string;\n    };\n    frontmatter: {\n      title: string;\n    };\n  };\n};\n\ntype Series = {\n  id: string;\n  frontmatter: { title: string };\n  fields: { slug: string };\n  currentPost: boolean;\n};\n\ntype ReadingTime = {\n  minutes: number;\n};\n\ntype PageQueryResult = {\n  markdownRemark: {\n    html: string;\n    id: string;\n    frontmatter: Frontmatter;\n    fields: {\n      readingTime: ReadingTime;\n      slug: string;\n    };\n  };\n  previous: Article;\n  next: Article;\n  seriesList: {\n    edges: Array<SeriesPost>;\n  };\n};\n\ntype Props = {\n  data: PageQueryResult;\n};\n\nconst Post = ({ data }: Props) => {\n  const post = data.markdownRemark;\n  const { previous, next, seriesList } = data;\n\n  const { title, date, tags, series, description } = post.frontmatter;\n  const { readingTime, slug } = post.fields;\n\n  let filteredSeries: Array<Series> = [];\n  if (series !== null) {\n    filteredSeries = seriesList.edges.map((seriesPost) => {\n      if (seriesPost.node.id === post.id) {\n        return {\n          ...seriesPost.node,\n          currentPost: true,\n        };\n      } else {\n        return {\n          ...seriesPost.node,\n          currentPost: false,\n        };\n      }\n    });\n  }\n\n  return (\n    <Layout>\n      <SEO\n        title={title}\n        description={description}\n        url={`${BlogConfig.siteUrl}${slug}`}\n      />\n      <Article.Wrapper>\n        <Article.Header\n          title={title}\n          date={date}\n          tags={tags}\n          minToRead={Math.round(readingTime.minutes)}\n        />\n        {filteredSeries.length > 0 && (\n          <Article.Series header={series} series={filteredSeries} />\n        )}\n        <Article.Body html={post.html} />\n        <Article.Footer previous={previous} next={next} />\n      </Article.Wrapper>\n    </Layout>\n  );\n};\n\nexport default Post;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $series: String\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 200, truncate: true)\n      html\n      frontmatter {\n        title\n        date(formatString: \"YYYY.MM.DD\")\n        update(formatString: \"YYYY.MM.DD\")\n        tags\n        series\n        description\n      }\n      fields {\n        slug\n        readingTime {\n          minutes\n        }\n      }\n    }\n    seriesList: allMarkdownRemark(\n      sort: { order: ASC, fields: [frontmatter___date] }\n      filter: { frontmatter: { series: { eq: $series } } }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["data","post","markdownRemark","previous","next","seriesList","frontmatter","title","date","tags","series","description","fields","readingTime","slug","filteredSeries","edges","map","seriesPost","node","id","currentPost","React","Layout","SEO","url","BlogConfig","Article","minToRead","Math","round","minutes","length","header","html"],"sourceRoot":""}