{
    "componentChunkName": "component---src-templates-post-tsx",
    "path": "/rxjs-observable/",
    "result": {"data":{"site":{"siteMetadata":{"title":"영의 시간"}},"markdownRemark":{"id":"5d406279-db33-5aa2-a888-bfc41706a9ef","excerpt":"프롤로그 안녕하세요! 제로입니다.\n저번의 RxJS 공식 문서 OVERVIEW 번역 에 이어,\n공식 문서 가이드의 Observable 문서를 번역해보려 합니다. Observable(옵저버블) 소개 옵저버블은 여러 값들에 대한 \"Lazy Push\" 콜렉션입니다.  Single Multiple Pull   Push   예제. 아래의 코드는 구독 즉시(동기적으로…","html":"<h2>프롤로그</h2>\n<p>안녕하세요! 제로입니다.\n저번의 <a href=\"https://6h15m.github.io/rxjs-overview/\">RxJS 공식 문서 OVERVIEW 번역</a> 에 이어,\n공식 문서 가이드의 <a href=\"https://rxjs.dev/guide/observable\">Observable</a> 문서를 번역해보려 합니다.</p>\n<h2>Observable(옵저버블) 소개</h2>\n<p>옵저버블은 여러 값들에 대한 \"Lazy Push\" 콜렉션입니다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Single</th>\n<th>Multiple</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Pull</strong></td>\n<td><a href=\"https://developer.mozilla.org/ko/docs/Glossary/Function\"><code class=\"language-text\">함수</code></a></td>\n<td><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Iteration_protocols\"><code class=\"language-text\">Iterator</code></a></td>\n</tr>\n<tr>\n<td><strong>Push</strong></td>\n<td><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code class=\"language-text\">Promise</code></a></td>\n<td><a href=\"https://rxjs.dev/api/index/class/Observable\"><code class=\"language-text\">옵저버블</code></a></td>\n</tr>\n</tbody>\n</table>\n<p><strong>예제.</strong> 아래의 코드는 구독 즉시(동기적으로) <code class=\"language-text\">1</code>, <code class=\"language-text\">2</code>, <code class=\"language-text\">3</code>을 push하고,\n구독 후 1초가 지났을 때 <code class=\"language-text\">4</code>를 push해 완료되는 옵저버블입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>옵저버블을 호출해 값을 확인하려면, 이 옵저버블을 구독해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"방금 구독되었어요!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobservable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"값: \"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"문제가 발생했습니다: \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"완료!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"구독 직후입니다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>콘솔을 확인해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-none line-numbers\"><code class=\"language-none\">방금 구독되었어요!\n값: 1\n값: 2\n값: 3\n구독 직후입니다!\n값: 4\n완료!</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Pull vs Push</h2>\n<p><em>Pull</em> 과 <em>Push</em> 는 데이터 <em>생산자</em> 가 데이터 <em>소비자</em> 와 통신하는 방법에 해당하는 두 가지 프로토콜입니다.</p>\n<p><strong>Pull이란?</strong> Pull 시스템에서는, 소비자가 데이터 생산자로부터 데이터를 받을 타이밍을 결정합니다.\n즉, 생산자는 데이터가 소비자에게 언제 전달되는지 알지 못하죠.</p>\n<p>모든 JavaScript 함수는 Pull 시스템입니다.\n함수는 데이터 생산자이며, 함수를 호출하는 코드는 호출 시 <em>하나의</em> 리턴 값을 \"pull\"합니다.</p>\n<p>ES2015에서는 Pull 시스템의 또 다른 형태인\n<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/function*\">제너레이터 함수와 이터레이터</a> (<code class=\"language-text\">function*</code>)가 등장했습니다.\n이 개념에서는 <code class=\"language-text\">iterator.next()</code>를 호출하는 코드(소비자)가 이터레이터(생산자)에서 <em>여러 개</em> 의 값을 \"pull\"합니다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>생산자</th>\n<th>소비자</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Pull</strong></td>\n<td><strong>수동적:</strong> 요청 시 데이터 생산</td>\n<td><strong>능동적:</strong> 데이터를 요청하는 타이밍을 결정</td>\n</tr>\n<tr>\n<td><strong>Push</strong></td>\n<td><strong>능동적:</strong> 자체적으로 데이터 생산</td>\n<td><strong>수동적:</strong> 전달받은 데이터에 반응</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Push란?</strong> Push 시스템에서는, 소비자에게 데이터를 보내는 타이밍을 생산자가 결정합니다.\n즉, 소비자는 언제 데이터를 전달받을지 알 수 없죠.</p>\n<p>JavaScript에서 가장 흔하게 볼 수 있는 Push 시스템에는 Promise가 있습니다.\nPromise(생산자)는 resolve된 값을 등록된 콜백 함수(소비자)에 전달합니다.\n함수와는 달리, Promise 자체적으로 값이 콜백에 \"push\"되는 시기를 결정하죠.</p>\n<p>RxJS는 JavaScript를 위한 새로운 Push 시스템, 옵저버블을 도입했습니다.\n옵저버블은 여러 값들을 생산해, 그 값들을 옵저버(소비자)에게 \"push\"합니다.</p>\n<ul>\n<li><strong>함수</strong>는 호출 시 단일 값을 동기적으로 리턴하는 지연 평가 계산입니다.</li>\n<li><strong>제너레이터</strong>는 호출 시 0부터 (잠재적으로) 무한대까지의 값들을 동기적으로 리턴하는 지연 평가 계산입니다.</li>\n<li><strong>Promise</strong>는 단일 값을 리턴할 수도 있고 리턴하지 않을 수도 있는 계산입니다.</li>\n<li><strong>옵저버블</strong>은 호출 시 0부터 (잠재적으로) 무한대까지의 값들을 동기적으로, 또는 비동기적으로 리턴하는 지연 평가 계산입니다.</li>\n</ul>\n<blockquote>\n<p>옵저버블을 Promise로 변환하는 것에 대한 자세한 정보가 알고 싶으시다면, <a href=\"https://rxjs.dev/deprecations/to-promise\">이 가이드 문서</a> 를 참조해 주세요.</p>\n</blockquote>\n<h2>함수와 옵저버블</h2>\n<p>옵저버블은 EventEmitter나 여러 값을 다루는 Promise와 같지 않습니다.\n옵저버블은 때에 따라 EventEmitter <em>같은</em> 역할을 수행할 수도 있지만, 일반적으로 EventEmitter처럼 작동하지는 않습니다.</p>\n<blockquote>\n<p>옵저버블은 인수 없는 함수이지만, 여러 값을 허용하도록 인수들을 일반화합니다.</p>\n<p><del>역: 무슨 말인지 저도 이해 못 함</del></p>\n</blockquote>\n<p>밑의 예제를 살펴봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo()와 같음</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo()와 같음</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>출력은 아마 이렇게 될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-none line-numbers\"><code class=\"language-none\">\"안녕!\"\n42\n\"안녕!\"\n42</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>옵저버블을 이용해 같은 동작을 구현해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>똑같이 출력됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-none line-numbers\"><code class=\"language-none\">\"안녕!\"\n42\n\"안녕!\"\n42</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이는 함수와 옵저버블 모두 지연 평가에 해당하기 때문입니다.\n함수를 호출하지 않았다면, <code class=\"language-text\">console.log('안녕!')</code>은 발생하지 않았겠죠?\n옵저버블에서도 마찬가지로 <code class=\"language-text\">subscribe</code>로 \"호출\"하지 않았다면 <code class=\"language-text\">console.log('안녕!')</code>은 발생하지 않았을 것입니다.</p>\n<p>추가적으로, \"호출\"과 \"구독\"은 분리되어 있는 연산입니다.\n두 개의 함수 호출은 두 개의 개별 사이트 이펙트를 유발하고,\n두 개의 옵저버블 구독은 두 개의 개별 사이드 이펙트를 유발합니다.\n사이드 이펙트를 공유하며 구독자의 존재와 관계없이 실행하는 EventEmitter와 달리,\n옵저버블은 실행을 공유하지 않으며 지연적으로 동작합니다.</p>\n<blockquote>\n<p>옵저버블을 구독하는 것은 함수를 호출하는 것과 유사합니다.</p>\n</blockquote>\n<p>옵저버블이 비동기적이라고 생각하는 경우도 있지만, 그건 사실이 아닙니다.\n다음과 같이 로그 안에서 함수를 호출해 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이전\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이후\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>이렇게 출력되겠군요.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-none line-numbers\"><code class=\"language-none\">\"이전\"\n\"안녕!\"\n42\n\"이후\"</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>옵저버블로 구현해도 이 동작은 동일합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이전\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이후\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>출력은 이렇습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-none line-numbers\"><code class=\"language-none\">\"이전\"\n\"안녕!\"\n42\n\"이후\"</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이는 <code class=\"language-text\">foo</code> 옵저버블의 구독이 완벽히 동기적이라는 것을 증명하죠.(마치 함수처럼요!)</p>\n<blockquote>\n<p>옵저버블은 값을 동기적으로, 또는 비동기적으로 전달할 수 있습니다.</p>\n</blockquote>\n<p>옵저버블과 함수의 차이점은 무엇일까요? <strong>옵저버블은 시간이 지남에 따라 여러 개의 값을 \"리턴\"할 수 있습니다.</strong> 함수에선 불가능한 작업이죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 절대 발생할 수 없는 죽은 코드입니다.</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>함수는 오직 하나의 값만 리턴할 수 있지요. 하지만 옵저버블은, 이렇게 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 다른 값을 \"리턴\"</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 또 다른 \"리턴\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이전\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이후\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>동기적으로 출력된 것을 보죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-none line-numbers\"><code class=\"language-none\">\"이전\"\n\"안녕!\"\n42\n100\n200\n\"이후\"</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>물론, 값들을 비동기적으로 \"리턴\"할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// happens asynchronously</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이전\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이후\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>출력은 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-none line-numbers\"><code class=\"language-none\">\"이전\"\n\"안녕!\"\n42\n100\n200\n\"이후\"\n300</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>정리:</p>\n<ul>\n<li><code class=\"language-text\">func.call()</code>은 <em>동기적으로 하나의 값을 주는 것</em> 을 의미합니다.</li>\n<li><code class=\"language-text\">observable.subscribe()</code>는 <em>동기적으로든 비동기적으로든 개수 상관없이 값을 주는 것</em> 을 의미합니다.</li>\n</ul>\n<h2>옵저버블의 구석구석</h2>\n<p>옵저버블은 <code class=\"language-text\">new Observable</code>이나 생성 연산자를 통해 <strong>생성</strong>되며,\n옵저버를 통해 <strong>구독</strong>되며,\n옵저버에게 <code class=\"language-text\">next</code> / <code class=\"language-text\">error</code> / <code class=\"language-text\">complete</code> 알림을 전달하기 위해 <strong>실행</strong>되며,\n이 실행은 <strong>해제</strong>될 수 있습니다.\n이 4가지 동작들은 모두 옵저버블 인스턴스로 인코딩되지만,\n일부는 옵저버 또는 구독과 같은 다른 타입과 관련되어 있습니다.</p>\n<p>아래는 옵저버블의 핵심 기능들입니다.</p>\n<ul>\n<li>옵저버블 <strong>생성</strong></li>\n<li>옵저버블 <strong>구독</strong></li>\n<li>옵저버블 <strong>실행</strong></li>\n<li>옵저버블 <strong>해제</strong></li>\n</ul>\n<h3>옵저버블 생성</h3>\n<p><code class=\"language-text\">Observable</code> 생성자는 하나의 인수, <code class=\"language-text\">subscribe</code> 함수만을 취합니다.</p>\n<p>초당 한 번씩 구독자에게 <code class=\"language-text\">'안녕!'</code>문자열을 내보내는 옵저버블을 구현해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>일반적으로는 생성 함수(예: <code class=\"language-text\">of</code>, <code class=\"language-text\">from</code>, <code class=\"language-text\">interval</code> 등)를 이용하지만,\n<code class=\"language-text\">new Observable</code>을 이용해서도 옵저버블을 생성할 수 있습니다.</p>\n</blockquote>\n<p>위의 예제에서, <code class=\"language-text\">subscribe</code> 함수는 옵저버블을 설명하는 데 있어 가장 중요한 부분입니다. 이 \"구독\"이 무엇을 의미하는지 살펴봅시다.</p>\n<h3>옵저버블 구독</h3>\n<p>예제의 <code class=\"language-text\">observable</code> 옵저버블은 이렇게 <em>구독</em> 될 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\">observable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><code class=\"language-text\">observable.subscribe</code>와 <code class=\"language-text\">new Observable(function subscribe(subscriber) {...})</code>의 <code class=\"language-text\">subscribe</code>가 같은 이름을 가진 건 우연이 아닙니다.\n이 둘은 라이브러리 내부에서는 다르지만, 개념적으로 동일하다고 생각할 수 있습니다.</p>\n<p>이는 동일한 옵저버블에 대한 여러 개의 옵저버들 사이에서 <code class=\"language-text\">subscribe</code> 호출이 공유되지 않는다는 것을 보여줍니다.\n옵저버를 통해 <code class=\"language-text\">observable.subscribe</code>를 호출할 때, 해당 구독자에 대해 <code class=\"language-text\">new Observable(function subscribe(subscriber) {...})</code>의 <code class=\"language-text\">subscribe</code> 함수가 실행됩니다.\n<code class=\"language-text\">observable.subscribe</code>에 대한 각 호출은 해당 구독자에 대해 자체적으로 독립된 기반을 발생시킵니다.</p>\n<blockquote>\n<p>옵저버블을 구독하는 것은 함수를 호출하여, 데이터가 전달될 콜백을 제공하는 것과 같습니다.</p>\n</blockquote>\n<p>이는 <code class=\"language-text\">addEventListener</code> / <code class=\"language-text\">removeEventListener</code>와 같은 이벤트 핸들러 API와 확연히 차이가 있습니다.\n<code class=\"language-text\">observable.subscribe</code>에서, 주어진 옵저버는 옵저버블의 리스너로 등록되지 았습니다.\n옵저버블은 등록된 옵저버들의 목록도 갖고 있지 않죠.</p>\n<p><code class=\"language-text\">subscribe</code> 호출은 단순히 \"옵저버블의 실행\"을 시작하고 이 실행의 옵저버에게 값이나 이벤트를 전달할 뿐입니다.</p>\n<h3>옵저버블 실행</h3>\n<p><code class=\"language-text\">new Observable(function subscribe(subscriber) {...})</code> 내부의 코드는 \"옵저버블의 실행\", 즉 구독한 각 옵저버에서만 발생하는 지연 평가를 나타냅니다.\n이 실행은 시간에 지남에 따라 동기적으로, 또는 비동기적으로 여러 값들을 생산합니다.</p>\n<p>옵저버블의 실행이 전달할 수 있는 3가지 타입의 값이 있습니다.</p>\n<ul>\n<li>\"Next\" 알림: 숫자, 문자열, 객체 등의 값들을 전송합니다.</li>\n<li>\"Error\" 알림: JavaScript Error 또는 예외를 전송합니다.</li>\n<li>\"Complete\" 알림: 값을 내보내지 않습니다.</li>\n</ul>\n<p>\"Next\" 알림은 가장 중요하고 자주 쓰이는 타입으로, 구독자에게 전달되는 실제 데이터를 나타냅니다. \"Error\"와 \"Complete\" 알림은 옵저버블 실행 중 한 번만 발생할 수 있으며, 둘 중 하나만 발생할 수 있습니다.</p>\n<p>이러한 제약 조건은 정규 표현식으로 작성된 <em>옵저버블 문법</em> 또는 <em>약속</em> 으로 가장 잘 표현할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-none line-numbers\"><code class=\"language-none\">next*(error|complete)?</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<blockquote>\n<p>옵저버블 실행에서, 0에서 무한대 개수의 Next 알림이 전달될 수 있습니다. Error 또는 Complete 알림이 전달되면, 이후에는 아무것도 전달할 수 없습니다.</p>\n</blockquote>\n<p>3개의 Next 알림을 전달하고, 완료되는 옵저버블 실행 예제를 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>옵저버블 약속은 엄격히 준수되므로, 다음 코드는 Next 알림 <code class=\"language-text\">4</code>를 전달하지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 약속에 위반되므로 전달되지 않습니다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">subscribe</code> 내부의 코드에서 예외 발생 시 Error 알림이 전달되게끔 <code class=\"language-text\">try</code>/<code class=\"language-text\">catch</code> 블록으로 감싸는 것도 좋은 방법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 예외가 발생되면 에러 전달</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>옵저버블 해제</h3>\n<p>옵저버블은 무한하게 실행될 수 있으며, 옵저버는 일반적으로 제한된 시간 내에 실행을 중단하길 원하기 때문에, 실행을 취소하기 위한 API가 필요합니다.\n각 실행은 하나의 옵저버에만 독점적이므로, 옵저버가 값 수신을 완료하면 연산 또는 메모리 리소스를 낭비하지 않도록 실행을 중지할 수 있는 방법이 있어야 하죠.</p>\n<p><code class=\"language-text\">observable.subscribe</code>가 호출되면, 옵저버는 새로 생성된 옵저버블 실행과 연결됩니다.\n이 호출은 <code class=\"language-text\">Subscription</code>이라는 객체도 리턴하죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> subscription <span class=\"token operator\">=</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><code class=\"language-text\">Subscription</code>은 진행 중인 실행을 나타내며, 실행을 취소할 수 있는 API를 가지고 있습니다.\n<code class=\"language-text\">Subscription</code> 타입에 대한 자세한 내용은 <a href=\"https://rxjs.dev/guide/subscription\">여기</a> 를 참조하세요.\n<code class=\"language-text\">subscription.unsubscribe()</code>로 진행 중인 실행을 취소할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> from <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observable <span class=\"token operator\">=</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> subscription <span class=\"token operator\">=</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 나중에는-</span>\nsubscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>구독하면 현재 진행 중인 실행을 나타내는 Subscription을 반환하며, 이 객체의 <code class=\"language-text\">unsubscribe()</code>를 호출해 실행을 취소할 수 있습니다.</p>\n</blockquote>\n<p><code class=\"language-text\">create()</code>를 이용해 옵저버블을 생성할 때, 각 옵저버블은 해당 실행의 리소스를 해제하는 방법을 정의해야 합니다.\n<code class=\"language-text\">function subscribe()</code> 내부의 커스텀 <code class=\"language-text\">unsubscribe</code> 함수를 리턴하는 방식으로 이를 정의할 수 있죠.</p>\n<p><code class=\"language-text\">setInterval</code>을 이용한 예제를 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> observable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subscriber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 인터벌 리소스에 대한 추적</span>\n  <span class=\"token keyword\">const</span> intervalId <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 인터벌 리소스를 취소하고 해제하는 방법 정의</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">observable.subscribe</code>가 <code class=\"language-text\">new Observable(function subscribe() {...})</code>과 유사하듯이,\n<code class=\"language-text\">subscribe</code>에서 리턴한 <code class=\"language-text\">unsubscribe</code>는 개념적으로 <code class=\"language-text\">subscription.unsubscribe</code>와 유사합니다.\n사실, 이러한 개념들을 둘러싼 ReactiveX 타입들을 제거하면 매우 간단한 JavaScript 코드만이 남습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subscriber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> intervalId <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 나중에는-</span>\n<span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 리소스 해제</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>옵저버블, 옵저버, 구독과 같은 Rx 타입들을 사용하는 이유는 안정성(예: 옵저버블 약속)과 연산자와의 결합성을 얻기 위해서입니다.</p>","frontmatter":{"title":"[번역] RxJS 공식 문서 #Observable","date":"2022.04.11","update":"2022.04.11","tags":["RxJS","Reactive Programming"],"series":"RxJS 공식 문서 번역","description":"🇰🇷 Observable, 너는 누구냐-"},"fields":{"slug":"/rxjs-observable/","readingTime":{"minutes":19.175}}},"seriesList":{"edges":[{"node":{"id":"9da63484-acd9-5100-8fa1-bc2a3475c1ae","fields":{"slug":"/rxjs-overview/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #OVERVIEW"}}},{"node":{"id":"5d406279-db33-5aa2-a888-bfc41706a9ef","fields":{"slug":"/rxjs-observable/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Observable"}}},{"node":{"id":"f76505b5-ec0f-51d7-8acd-c753e834575e","fields":{"slug":"/rxjs-observer/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Observer"}}},{"node":{"id":"83526932-48ad-578e-9a1d-4a9044874ed7","fields":{"slug":"/rxjs-operators/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Operators"}}}]},"previous":{"fields":{"slug":"/rxjs-overview/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #OVERVIEW"}},"next":{"fields":{"slug":"/rxjs-observer/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Observer"}}},"pageContext":{"id":"5d406279-db33-5aa2-a888-bfc41706a9ef","series":"RxJS 공식 문서 번역","previousPostId":"9da63484-acd9-5100-8fa1-bc2a3475c1ae","nextPostId":"f76505b5-ec0f-51d7-8acd-c753e834575e"}},
    "staticQueryHashes": ["869547123"]}