{"componentChunkName":"component---src-pages-index-jsx","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"영의 시간"}},"allMarkdownRemark":{"group":[{"fieldValue":"Github","totalCount":1},{"fieldValue":"Jekyll","totalCount":2},{"fieldValue":"Reactive Programming","totalCount":1},{"fieldValue":"RxJS","totalCount":1}],"nodes":[{"fields":{"slug":"/rxjs-overview/"},"frontmatter":{"date":"2022.04.06","update":"2022.04.06","title":"RxJS OVERVIEW 번역","tags":["RxJS","Reactive Programming"],"description":"🇰🇷 공식 문서의 RxJS 개요를 번역해보자!"},"rawMarkdownBody":"\n## 프롤로그\n\n안녕하세요! 제로입니다.\n최근 RxJS를 사용할 일이 생겨 열심히 학습하던 중, [Learn RxJS](https://www.learnrxjs.io/) 라는 문서를 발견해 번역해보고 있었어요.\n공식 문서보다 조금 더 알기 쉽게 설명되어 있는 것 같아 학습에 큰 도움이 되었지만,\nv6 이후로 업데이트되지 않아 deprecated 된 자료들이 꽤 많았습니다.\n\n[저희의 Learn RxJS](https://chasethestar.gitbook.io/ko.learn-rxjs) 가 정확한 학습 자료로 거듭나려면\n**공식 문서를 먼저 학습해야겠다**는 판단이 생기게 되었고, [OVERVIEW](https://rxjs.dev/guide/overview)에 해당하는 영역부터 번역~~(의역)~~해나가 보려고 합니다.\n\n## RxJS 소개\n\nRxJS는 [Observable(옵저버블)](https://rxjs.dev/guide/observable) 시퀀스를 이용해 비동기 및 이벤트 기반 프로그램을 구성하기 위한 라이브러리입니다.\n옵저버블, 옵저버블에 종속되는 타입들(Observer, Schedulers, Subjects),\n`Array` 메소드(`map`, `filter`, `reduce`, `every` 등)에서 영감받은 Operator(연산자)를 제공하여\n비동기 이벤트를 콜렉션처럼 다룰 수 있게 하죠.\n\n> 이벤트 처리를 위한 Lodash, **RxJS**\n\nReactiveX는 이벤트 시퀀스를 관리하는 이상적인 방법으로 [옵저버 패턴](https://en.wikipedia.org/wiki/Observer_pattern),\n[이터레이터 패턴](https://en.wikipedia.org/wiki/Iterator_pattern),\n[콜렉션을 다루는 함수형 프로그래밍](http://martinfowler.com/articles/collection-pipeline/#NestedOperatorExpressions) 을 결합하는 것을 택했습니다.\n\n### 비동기 이벤트를 관리하는 RxJS의 필수 개념\n\n- **Observable** - `옵저버블`: 호출 가능한 미래의 값 또는 이벤트에 대한 집합\n- **Observer** - `옵저버`: 옵저버블이 제공하는 값을 소비할 수 있는 콜백 함수의 집합\n- **Subscription** - `구독`: 옵저버블의 실행\n- **Operators** - `연산자`: `map`, `filter`, `concat`, `reduce` 같은 연산으로 컬렉션을 처리(함수형 프로그래밍 스타일)하는 순수함수\n- **Subject** - `서브젝트`: EventEmitter와 동일하게, 값 또는 이벤트를 여러 옵저버에 멀티캐스팅할 수 있게 하는 옵저버블의 한 종류\n- **Schedulers** - `스케쥴러`: 동시성을 제어하는 중앙 집중적인 스케쥴러(예: `setTimeout` 또는 `requestAnimationFrame` 등의 연산이 발생했을 때 조정이 가능하게 함)\n\n## 예제로 알아보는 RxJS\n\n보통은, 이벤트 리스너를 등록하죠.\n\n```ts\ndocument.addEventListener(\"click\", () => console.log(\"클릭하셨네요!\"));\n```\n\nRxJS를 사용한다면 이벤트 리스너 대신 옵저버블을 생성합니다.\n\n```ts\nimport { fromEvent } from \"rxjs\";\n\nfromEvent(document, \"click\").subscribe(() => console.log(\"클릭하셨네요!\"));\n```\n\n### 순수성\n\nRxJS가 강력한 이유는 순수함수를 이용해 값을 생성할 수 있기 때문입니다.\n이는 오류가 발생할 가능성이 낮다는 뜻이죠.\n\n일반적으로 우리는 '순수하지 않은', 다른 상태까지 망칠 수 있는 함수를 생성합니다.\n\n```ts\nlet count = 0;\ndocument.addEventListener(\"click\", () =>\n  console.log(`${++count}번이나 클릭하셨군요!`),\n);\n```\n\nRxJS를 사용한다면 상태는 서로 격리됩니다.\n\n```ts\nimport { fromEvent, scan } from \"rxjs\";\n\nfromEvent(document, \"click\")\n  .pipe(scan((count) => count + 1, 0))\n  .subscribe((count) => console.log(`${count}번이나 클릭하셨군요!`));\n```\n\n**scan** 연산자는 배열의 **reduce**와 유사하게 동작해,\n리턴된 콜백 함수의 값은 다음 콜백 함수의 매개 변수가 됩니다.\n\n### 유동성\n\nRxJS의 연산자들은 옵저버블을 통과하는 이벤트들의 흐름을 제어합니다. (종류도 다양하죠!)\n\nPlain JavaScript로 초당 최대 한 번으로 클릭을 제한하는 기능을 구현해보겠습니다.\n\n```ts\nlet count = 0;\nlet rate = 1000;\nlet lastClick = Date.now() - rate;\ndocument.addEventListener(\"click\", () => {\n  if (Date.now() - lastClick >= rate) {\n    console.log(`${++count}번 클릭하셨어요!`);\n    lastClick = Date.now();\n  }\n});\n```\n\nRxJS로도 구현해볼게요.\n\n```ts\nimport { fromEvent, throttleTime, scan } from \"rxjs\";\n\nfromEvent(document, \"click\")\n  .pipe(\n    throttleTime(1000),\n    scan((count) => count + 1, 0),\n  )\n  .subscribe((count) => console.log(`${count}번 클릭하셨어요!`));\n```\n\n다른 흐름 제어 연산자에는 [**filter**](https://rxjs.dev/api/operators/filter),\n[**delay**](https://rxjs.dev/api/operators/delay),\n[**debounceTime**](https://rxjs.dev/api/operators/debounceTime),\n[**take**](https://rxjs.dev/api/operators/take),\n[**takeUntil**](https://rxjs.dev/api/operators/takeUntil),\n[**distinct**](https://rxjs.dev/api/operators/distinct),\n[**distinctUntilChanged**](https://rxjs.dev/api/operators/distinctUntilChanged) 등이 있습니다.\n\n### 값\n\nRxJS에서는 옵저버블을 통과하는 값들을 변환할 수 있습니다.\n\nPlain JavaScript로 클릭할 때마다 현재 마우스의 x 좌표를 더하는 기능을 구현해보겠습니다.\n\n```ts\nlet count = 0;\nconst rate = 1000;\nlet lastClick = Date.now() - rate;\ndocument.addEventListener(\"click\", (event) => {\n  if (Date.now() - lastClick >= rate) {\n    count += event.clientX;\n    console.log(count);\n    lastClick = Date.now();\n  }\n});\n```\n\nRxJS로도 구현해볼게요.\n\n```ts\nimport { fromEvent, throttleTime, map, scan } from \"rxjs\";\n\nfromEvent(document, \"click\")\n  .pipe(\n    throttleTime(1000),\n    map((event) => event.clientX),\n    scan((count, clientX) => count + clientX, 0),\n  )\n  .subscribe((count) => console.log(count));\n```\n\n다른 값 관련 연산자에는 [**pluck**](https://rxjs.dev/api/operators/pluck), [**pairwise**](https://rxjs.dev/api/operators/pairwise), [**sample**](https://rxjs.dev/api/operators/sample) 등이 있습니다.\n"},{"fields":{"slug":"/github-snake/"},"frontmatter":{"date":"2021.07.20","update":"2021.07.20","title":"Github 프로필에 잔디 먹는 뱀 추가하기","tags":["Github"],"description":"👀 2분의 투자로, 역동적이고 재밌게 깃허브 꾸미기"},"rawMarkdownBody":"\n## 프롤로그\n\n안녕하세요! 제로입니다.\n[찬성 님의 facebook 포스팅][facebook-posting]을 보고 너무 신기해서 따라해보게 된 Github Action을 소개해 드릴게요.\n\n![github-contribution-grid-snake](https://user-images.githubusercontent.com/52748335/125471173-30203e61-5705-43f9-9a85-afa9d643d45a.gif)\n\n이번 포스팅에선, 저와 같이 Github README 꾸미기에 진심인 분들을 위해 커밋 내역을 먹는 뱀🐍을 추가하는 방법을 알려드리겠습니다!\n\n[데모 확인하기][demo-site]  \n[GitHub 확인하기][github-snk]\n\n## 1. Github 프로필 README 생성\n\n[Github][github-main]에 **Github 아이디**와 동일한 이름의 새 레포지토리를 생성합니다.\n생성 이전에 **Add a README file** 속성을 체크해 주세요.  \n생성해서 해당 레포지토리에 들어가 보면, 이런 안내문이 보입니다.\n<br/><br/>\n![special](https://user-images.githubusercontent.com/52748335/126091043-b18d702d-e01b-4a2b-9c5a-604c719de423.PNG)<br/>\n\nGithub 아이디를 이름으로 한 레포지토리는 특별한 레포지토리여서, 이 레포지토리의 README.md는\n깃허브 프로필에서 보입니다. 이렇게요!<br/><br/>\n![기존 리드미](https://user-images.githubusercontent.com/52748335/126091437-80f02fb3-8545-43e1-87ac-2ae6ee744561.PNG)\n<br/>\n\nGithub 블로그를 썼던 것처럼 마크다운 문법을 쓰면 저처럼 다양하게 꾸며볼 수 있습니다. Google에 **Github 프로필 꾸미기**로 검색하시면 방법을 많이 찾아볼 수 있습니다! 😁<br/>\n<br/>\n\n## 2. Github Actions 추가\n\n### Github Actions란?\n\n본격적으로 뱀 GIF를 생성하기 위해 프로필 레포지토리에 Github Actions를 추가해야 합니다.\n[Github Actions][github-actions]는 Github 이벤트를 기반으로 소프트웨어 workflow를 자동화할 수 있도록 하는 도구입니다. 더 자세히 알고 싶다면 [공식 문서][github-actions-docs]를 참고해 주세요.  \n여기에선 특정 시간마다 자신의 커밋 내역에 맞게 GIF를 새로 생성하기 위해 사용합니다.<br/><br/>\n![yml 추가](https://user-images.githubusercontent.com/52748335/126317621-76ce7c5c-c4a2-45ca-a9dd-b5188b36d73c.PNG)<br/>\n위와 같이 `.github` 디렉토리를 만들고, 그 안에 `workflows` 디렉토리를 만들어주세요.\n`workflows` 안에 `snake.yml`을 생성 후, 해당 내용을 작성해주세요.\n\n```\n# 커밋 먹는 뱀 그래프 생성을 위한 GitHub Action🐍\n\nname: Generate Snake\n\n# Action이 언제 구동될지 결정\n\non:\n  schedule:\n    # 6시간마다 한 번(수정 가능)\n    - cron: \"0 */6 * * *\"\n\n  # 자동으로 Action이 실행되도록 함\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      # 뱀 생성\n      - uses: Platane/snk@master\n        id: snake-gif\n        with:\n          github_user_name: [Github 아이디]\n          # output branch에 gif, svg를 각각 생성\n          gif_out_path: dist/github-contribution-grid-snake.gif\n          svg_out_path: dist/github-contribution-grid-snake.svg\n\n      - run: git status\n\n      # 변경사항 push\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: master\n          force: true\n\n      - uses: crazy-max/ghaction-github-pages@v2.1.3\n        with:\n          target_branch: output\n          build_dir: dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n<br/>\n`github_user_name` 을 수정하시고, `schedule` 을 원하는 주기대로 설정 후 커밋해주세요.  \n<br/>\n다시 Github 레포지토리로 돌아와서, **Actions** 탭에 생성된 Workflow **Generate Snake**를 확인하세요! <br/><br/>\n![github actions](https://user-images.githubusercontent.com/52748335/126319031-eba35657-dfc2-4936-9a6d-bb0da9ccc385.PNG)<br/>\n\n`Run workflow` 를 선택해 실행해줍니다.<br/><br/>\n![run](https://user-images.githubusercontent.com/52748335/126319154-b4b6a0b4-e3fc-481e-95e7-fca8939263d5.PNG)<br/>\n\nActions 탭에서 실행이 잘 된 것을 확인할 수 있습니다.<br/><br/>\n![실행 완료](https://user-images.githubusercontent.com/52748335/126319484-f92f88f6-2eaa-42a3-b1a4-d78a5b1aa945.PNG)\n\n## 3. README 수정\n\n이제 생성된 GIF 또는 SVG를 `README.md`에 추가해주는 일만 남았는데요,  \nGIF 파일은 흰색 배경이어서 Default light 테마에 어울리고, <br/>\n\n![github-contribution-grid-snake](https://user-images.githubusercontent.com/52748335/126324403-01747446-9a5d-410c-8bb5-96ca13e8a017.gif)<br/>\n\nSVG 파일은 배경이 없고 색이 조금 더 어두운 편이라 Dark high contrast 테마에 어울리는 것 같습니다. 원하는 대로 자유롭게 사용하시면 됩니다! 나중에 색상 커스텀 기능도 추가되면 좋을 것 같네요 ☺ <br/>\n![snake gif](https://raw.githubusercontent.com/6h15m/6h15m/output/github-contribution-grid-snake.svg)<br/>\n<br/>\n\n```\n![snake gif](https://github.com/[GitHub 아이디]/[GitHub 아이디]/blob/output/github-contribution-grid-snake.svg)\n```\n\n**GitHub 아이디 수정 후** 해당 코드를 README.md의 원하는 부분에 추가해 주시면 됩니다. GIF 파일로 하고 싶으시면 파일 확장자만 gif로 변경해주세요!\n<br/>\n\n![readme 추가](https://user-images.githubusercontent.com/52748335/126319766-dd6587fe-4b85-4dae-aa54-955b6525f30f.PNG)<br/>\n\n완성된 모습입니다 😊<br/>\n\n![완성](https://user-images.githubusercontent.com/52748335/126325009-491bfa72-fe43-4752-a249-93ed82bc621f.PNG)<br/>\n<br/>\n\n## 참고한 문서\n\n- [How to enable GitHub Actions on your Profile README for a snake-eating contribution graph 🐍][reference]\n\n[github-main]: https://github.com\n[facebook-posting]: https://www.facebook.com/Thomas.CS.Park/posts/10221387355058694\n[demo-site]: https://platane.github.io/snk/\n[github-snk]: https://github.com/Platane/snk\n[github-actions]: https://github.com/features/actions\n[github-actions-docs]: https://docs.github.com/en/actions/learn-github-actions\n[reference]: https://dev.to/mishmanners/how-to-enable-github-actions-on-your-profile-readme-for-a-contribution-graph-4l66?fbclid=iwar2bgcj9b_0owzs_zr5e45y1nbir-9768lyzt1y5a7e4rd4dwwrtauuliss\n"},{"fields":{"slug":"/github-blog-2/"},"frontmatter":{"date":"2021.07.05","update":"2021.07.05","title":"Github로 개발 블로그 개설하기 #2","tags":["Jekyll"],"description":"✨ 개발 블로그는 만들었지만 어떻게 꾸며야 할지 모르겠어!"},"rawMarkdownBody":"\n## 프롤로그\n\n안녕하세요! 제로입니다.  \n[저번 포스팅][github-blog-1]에서는 Github Pages를 생성해보고, Ruby와 jekyll을 설치해 블로그에 테마를 적용해보았습니다.  \n이번 포스팅에선 테마의 내용을 수정해 온전히 '내 블로그'처럼 만들어보고, 글을 작성해보고, 작성된 글에 댓글을 달아 의견을 나눌 수 있게끔 하는 방법을 알려드리려 합니다 😁\n\n## 1. jekyll 테마 사용자화\n\n![1](https://user-images.githubusercontent.com/52748335/124222304-7311d000-db3c-11eb-8db6-8b6db795d9ef.PNG)<br/>\njekyll에선 테마를 커스텀하기 위해 [\\_config.yml][jekyll-config] 파일을 제공합니다.\n프로젝트 폴더에서 \\_config.yml 파일을 찾아서 들어가봅시다.\n<br/><br/>\n![2](https://user-images.githubusercontent.com/52748335/124222692-32ff1d00-db3d-11eb-96f6-4bce5e44722a.PNG)<br/>\n\n제 테마의 경우 이렇게 내용이 들어가 있었는데요, 주석으로 어디에 어떤 내용을 넣어야 하는지 친절하게 설명되어 있습니다. <br/>\n\n```\ntitle: 영의 시간\nauthor: 6h15m\nemail: 6h15m.develop@gmail.com\ndescription: >\n  0년차 프론트엔드 개발자 성장기\nshow_excerpts: true\nsass:\n  sass_dir: _sass\nplainwhite:\n  name: 제로\n  tagline: Front-end Developer ´◡`\n  date_format: \"%b %-d, %Y\"\n  sitemap: true\n  search: true\n  dark_mode: true\n  portfolio_image: \"assets/portfolio.png\"\n  html_lang: \"ko\"\n  condensed_mobile:\n    - page\n    - post\n  social_links:\n    twitter: 20develop\n    github:  6h15m\n    facebook: 100007430927430\n    email: 6h15m.devleop@gmail.com\ntheme: plainwhite\n\nplugins:\n  - jekyll-seo-tag\n```\n\n제가 커스텀한 \\_config.xml을 참고하여 작성해보셔도 좋을 것 같습니다.\n\n## 2. 글 작성하기\n\n![3](https://user-images.githubusercontent.com/52748335/124423203-a56f3780-dd9f-11eb-972b-28984628656b.PNG)<br/>\n글은 **\\_posts**폴더에 `.md` 형태의 파일로 씁니다. 없으면 같은 이름으로 생성해주세요.  \n.md 파일의 이름은 **yyyy-mm-dd-제목** 형태여야 합니다.\n\n글에 레이아웃과 제목, 카테고리, 날짜 등을 지정하기 위해 **머릿글 생성**이 필요한데요, 제 테마는 이미 생성되어 있는 양식이 있어 내용만 교체하였습니다. 없으신 분들은 해당 테마의 readme.md를 참고하여 작성하시면 될 것 같습니다.\n\n```\n---\nlayout: post\ntitle:  \"📝 Github로 개발 블로그 개설하기 #1\"\ndate:   2021-06-28\ncategories: Blog\n---\n```\n\n글 내용을 작성하기 위해선 **마크다운 문법**을 알아야 하는데, 이 부분은 [Kim Ji-Heon 님의 정리자료][ihoneymon-markdown]와 [위키독스 마크다운 설명서][wikidocs-markdown]를 참고하시면 좋을 것 같습니다. 저도 추후에 단독 포스팅으로 정리해볼 생각이지만요!  \n~~알아두면 Github readme를 꾸밀 때 매우 유용합니다 😙~~ <br/>\n<br/>\n\n## 3. 댓글 기능 추가하기\n\n처음엔 [disqus][disqus]를 활용하여 댓글 기능을 추가해보았으나, 댓글 기록이 날아갈 수도 있고 블로그 로딩 속도가 느려진다는 글을 보아서, [utterances][utterances]로 교체해보았습니다. disqus에 비해 나은 점은 **디자인이 깔끔**하고, **Github Issue에 자동으로 저장**된다는 것이 있었습니다. 만약 댓글이 많이 달린다면 속도 차이도 체감할 수 있을 것 같네요.\n\n![7](https://user-images.githubusercontent.com/52748335/124427642-9d66c600-dda6-11eb-833f-c845aa0277c0.PNG)<br/>\nGithub apps에서 [utterances app][github-apps-utterances]을 찾아 블로그 레포지토리에 설치해줍니다.  \n설치되면 [utterances][utterances] 페이지로 이동되는데, 이곳에서 Issue title의 매핑 방식과 label, 테마 등을 커스텀할 수 있습니다. 자신이 원하는 설정으로 커스텀해줍시다.  \n저는 매핑 방식은 'Issue title contains page title', label은 설정하지 않았고 테마는 'Github Light'로 설정했습니다.\n\n```html\n<script\n  src=\"https://utteranc.es/client.js\"\n  repo=\"6h15m/6h15m.github.io\"\n  issue-term=\"title\"\n  theme=\"github-light\"\n  crossorigin=\"anonymous\"\n  async\n></script>\n```\n\n이런 식으로 커스텀되어 나온 코드를 `_layouts` 폴더의 댓글을 넣고 싶은 레이아웃 파일에 포함시켜 주면 댓글 기능이 추가됩니다.  \n저는 포스팅된 글에만 댓글 기능을 추가하고 싶어서, `post.html`에만 이렇게 추가해보았습니다.\n![8](https://user-images.githubusercontent.com/52748335/124428938-36e2a780-dda8-11eb-875b-b470a069df6c.PNG)<br/>\n\n댓글을 작성해볼까요?\n![4](https://user-images.githubusercontent.com/52748335/124429177-81fcba80-dda8-11eb-8640-2963339895b9.PNG)<br/>\n\n잘 작성되네요!\n![5](https://user-images.githubusercontent.com/52748335/124429196-8923c880-dda8-11eb-9b33-fd1217a6c7a9.PNG)<br/>\n\n이렇게 Github Issues에도 잘 추가되는 모습을 볼 수 있습니다.\n![6](https://user-images.githubusercontent.com/52748335/124429271-9f318900-dda8-11eb-8def-da8e9c172141.PNG)<br/>\n<br/>\n\n## 다음 포스팅은\n\n제가 생각해둔 내용은 모두 다룬 것 같아서 추가적인 커스텀(통계, 디자인 커스텀 등....)이 필요하다면 해볼 생각입니다. 추천하시는 커스텀 방향이 있으면 댓글로 남겨주세요!\n\n<br/>\n\n[github-blog-1]: https://6h15m.github.io/blog/2021/06/28/github-blog.html\n[jekyll-config]: https://jekyllrb.com/docs/configuration/\n[ihoneymon-markdown]: https://gist.github.com/ihoneymon/652be052a0727ad59601\n[wikidocs-markdown]: https://wikidocs.net/1678\n[disqus]: https://disqus.com/\n[utterances]: https://utteranc.es/\n[github-apps-utterances]: https://github.com/apps/utterances\n"},{"fields":{"slug":"/github-blog-1/"},"frontmatter":{"date":"2021.06.28","update":"2021.06.28","title":"Github로 개발 블로그 개설하기 #1","tags":["Jekyll"],"description":"✨ Jekyll과 Github 도메인으로 나만의 블로그를 만들어보자!"},"rawMarkdownBody":"\n## 프롤로그\n\n안녕하세요! '영의 시간' 블로그 운영자 제로입니다.  \n그동안 티스토리를 이용해 개발 블로그를 운영해오다, 자유도 높게 커스텀할 수 있다는 깃허브 블로그의 장점에 반해 새롭게 개설해보게 되었습니다.  \n첫 글에서는 Github 개발 블로그를 개설하고, 테마를 적용하는 방법을 알려드리려 합니다😊\n\n## 1. Github 블로그 사이트 만들기\n\n![1](https://user-images.githubusercontent.com/52748335/123634195-1b7e1680-d855-11eb-8024-5753975ee141.PNG)<br/>\n\n블로그 사이트를 생성하기 위해, [Github pages][github-pages] 기능을 이용해볼 것입니다.  \n해당 사진처럼 [Github][github-main]에 새 레포지토리를 생성합니다.  \nRepository name은 <b>[Github 아이디].github.io</b> 로 해주세요. 이렇게 해야 Repository name과 같은 도메인으로 접속할 수 있습니다.\n<br/><br/>\n![2](https://user-images.githubusercontent.com/52748335/123637165-ab718f80-d858-11eb-94ba-c3e21a6b3982.png)<br/>\n\n생성된 Repository의 Settings-Pages에 들어가보면 페이지가 잘 생성되었는지 확인할 수 있습니다.<br/>\n<br/>\n\n## 2. Ruby, jekyll 설치\n\n### [jekyll][jekyll-main]이란?\n\njekyll은 다양한 포맷의 텍스트 파일을 가공해서, 정적인 웹사이트로 만들어주는 Ruby 기반의 사이트 생성기입니다. markdown 문법을 지원하고, 블로그를 위한 다양한 테마가 존재하기 때문에 많이 사용되는 것 같아요. 자세한 내용을 알고 싶다면 [jekyll 문서][jekyll-docs]에 상세하게 설명되어 있으니 참고해 보세요!<br/><br/>\n\n### 설치하기\n\njekyll을 사용하기 위해 먼저 Ruby를 설치해 보겠습니다. [Ruby 다운로드 링크][ruby-downloads]를 참고하여 다운로드해 주세요. 저는 RubyInstaller [Ruby+Devkit 2.7.3-1 (x64)][ruby-download-direct] 버전을 이용하여 다운받았습니다.\n<br/><br/>\n![3](https://user-images.githubusercontent.com/52748335/123639839-892d4100-d85b-11eb-9a59-32849bfe8b73.PNG)<br/>\n\ncmd에 `ruby -v` 명령어를 입력하면 잘 설치되었는지 확인할 수 있습니다.\n<br/><br/>\n![4](https://user-images.githubusercontent.com/52748335/123641331-1f159b80-d85d-11eb-8d09-9a782d6d240f.PNG)<br/>\n\n이어서 `gem install jekyll bundler` 를 입력해 jekyll과 [bundler][jekyll-bundler-docs] [젬][jekyll-gem-docs]을 설치해줍니다.<br/>\n<br/>\n\n## 3. jekyll 테마 적용\n\n### 테마 선정\n\n- [jamstackthemes.dev][jamstackthemes-dev]\n- [jekyllthemes.org][jekyll-themes]\n- [jekyllthemes.io][jekyll-themes-io](일부 유료)<br/>\n\n이외에도 다양한 테마가 있는데, 잘 찾아본 후 가장 마음에 드는 테마를 골라주세요.\n저는 비교적 꾸준히 업데이트되고 있고, 디자인이 깔끔해보이는 [plainwhite][plainwhite] 테마를 사용하였습니다. 원래 다른 테마(persephone)을 사용하려 했는데 중국어로 구성되어 있어 알아보기 힘들었고, 현재의 테마로 교체하였습니다.\n\n### 적용하기\n\n![5](https://user-images.githubusercontent.com/52748335/123653761-6b1a0d80-d868-11eb-920a-3527031903d3.png)<br/>\n\n원하는 테마를 Clone해서, 1단계에서 만들었던 자신의 Repository에 가져옵니다. 전 ZIP 파일로 다운로드해 압축을 풀고 다시 제 프로젝트 폴더에 넣는 과정을 거쳤지만, 클론에는 다양한 방법이 있으니 다른 방법도 참고해 보시면 좋을 것 같습니다.\n<br/><br/>\n![6](https://user-images.githubusercontent.com/52748335/123654467-11fea980-d869-11eb-97c2-ea2f95b7b40b.PNG)<br/>\n\n터미널에 `bundle exec jekyll serve` 라고 입력하면 저의 경우 에러가 났습니다. 이런 경우 터미널에서 알려주는 대로 `bundle install` 을 입력하고, 다시 `bundle exec jekyll serve` 를 해주면 해결되었습니다.\n\n### 에러 발생 사례\n\n종종 본인이 세팅한 jekyll의 버전이 다운받은 테마의 jekyll 버전과 달라서 에러가 발생하기도 합니다. 그럴 땐 Gemfile.lock 파일을 삭제하고, `bundle install` 을 입력하면 다시 Gemfile.lock을 만들며 테마가 적용된 사이트의 jekyll 버전이 변경됩니다.\n\n세팅된 jekyll 버전을 바꾸고 싶다면 `gem install bundler -v [설치할 버전]` 으로 바꿀 버전을 설치해주고, `gem uninstall bundler -v [삭제할 버전]` 으로 기존 버전을 삭제해주면 됩니다.\n\n### 접속\n\n![7](https://user-images.githubusercontent.com/52748335/123655881-5e96b480-d86a-11eb-8983-4d50ee677483.PNG)<br/>\n\n잘 따라오셨다면 http://localhost:4000으로 접속했을 시, 테마의 기본적인 레이아웃이 보일 것입니다.\n\n만약 <b>index of /</b> 같은 엉뚱한 페이지가 보인다면, \\_layouts 폴더에서 main으로 사용하고 싶은 레이아웃을 가져와 프로젝트 폴더에 index.md를 만들어줘야 합니다. 예시를 보여드리겠습니다.\n\n```\n---\nlayout: home\n---\n```\n\n<br/>\n\n## 다음 포스팅은\n\njekyll 테마를 사용자화하는 방법, 글을 작성하는 방법(마크다운 문법은 다루지 않을 예정입니다)과 댓글 기능을 추가하는 방법에 대해 다룰 예정입니다.\n\n감사합니다! 😚\n\n[github-main]: https://github.com\n[github-pages]: https://pages.github.com\n[jekyll-main]: https://jekyllrb-ko.github.io/\n[jekyll-docs]: https://jekyllrb-ko.github.io/docs\n[jekyll-bundler-docs]: https://jekyllrb-ko.github.io/docs/ruby-101/#bundler\n[jekyll-gem-docs]: https://jekyllrb-ko.github.io/docs/ruby-101/#gems\n[jamstackthemes-dev]: https://jamstackthemes.dev/ssg/jekyll/\n[jekyll-themes]: http://jekyllthemes.org/\n[jekyll-themes-io]: https://jekyllthemes.io/\n[plainwhite]: https://github.com/samarsault/plainwhite-jekyll\n[ruby-downloads]: https://www.ruby-lang.org/ko/downloads/\n[ruby-download-direct]: https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.7.3-1/rubyinstaller-devkit-2.7.3-1-x64.exe\n"}]}},"pageContext":{}},"staticQueryHashes":[]}