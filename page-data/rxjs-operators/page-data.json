{
    "componentChunkName": "component---src-templates-post-tsx",
    "path": "/rxjs-operators/",
    "result": {"data":{"site":{"siteMetadata":{"title":"영의 시간"}},"markdownRemark":{"id":"83526932-48ad-578e-9a1d-4a9044874ed7","excerpt":"프롤로그 안녕하세요! 제로입니다.\n저번의 RxJS 공식 문서 번역 #Observer 에 이어,\n공식 문서 가이드의 Operators 문서를 번역해보려 합니다. RxJS Operator(연산자) 소개 RxJS는 연산자 덕분에 유용합니다. 옵저버블 기반인데도 말이죠.\n연산자는 복잡한 비동기 코드를 쉽게 선언적으로 구성할 수 있도록 해주는 필수적 요소입니다. …","html":"<h2>프롤로그</h2>\n<p>안녕하세요! 제로입니다.\n저번의 <a href=\"https://6h15m.github.io/rxjs-observer/\">RxJS 공식 문서 번역 #Observer</a> 에 이어,\n공식 문서 가이드의 <a href=\"https://rxjs.dev/guide/operators\">Operators</a> 문서를 번역해보려 합니다.</p>\n<h2>RxJS Operator(연산자) 소개</h2>\n<p>RxJS는 <em>연산자</em> 덕분에 유용합니다. 옵저버블 기반인데도 말이죠.\n연산자는 복잡한 비동기 코드를 쉽게 선언적으로 구성할 수 있도록 해주는 필수적 요소입니다.</p>\n<h2>연산자란?</h2>\n<p>연산자는 <strong>함수</strong>입니다. RxJS에는 두 종류의 연산자들이 존재하는데요,</p>\n<p><strong>파이프형 연산자</strong>는 <code class=\"language-text\">observableInstance.pipe(operator())</code> 구문을 사용해 옵저버블에 연결할 수 있는 연산자들입니다.\n<a href=\"https://rxjs.dev/api/operators/filter\"><code class=\"language-text\">filter(...)</code></a> 나 <a href=\"https://rxjs.dev/api/operators/mergeMap\"><code class=\"language-text\">mergeMap(...)</code></a> 같은 것들이 포함되죠.\n이 연산자들을 호출해도 기존의 옵저버블 인스턴스는 <em>변경되지 않습니다</em>.\n대신, 첫 번째 옵저버블을 기반으로 <em>새로운</em> 옵저버블을 리턴합니다.</p>\n<blockquote>\n<p>파이프형 연산자는 옵저버블을 입력 값처럼 사용하고 다른 옵저버블을 리턴하는 함수입니다. 이 연산자는 순수함수로, 이전 옵저버블은 수정되지 않은 채로 유지됩니다.</p>\n</blockquote>\n<p>파이프형 연산자는 기본적으로 하나의 옵저버블을 입력 값으로 사용하며, 다른 옵저버블을 출력 값으로 생성하는 순수함수입니다.\n출력 옵저버블을 구독하면 입력 옵저버블도 구독됩니다.</p>\n<p><strong>생성 연산자</strong>는 새로운 옵저버블을 생성하기 위한 독립형 함수입니다.\n예를 들어, <code class=\"language-text\">of(1, 2, 3)</code>은 1, 2, 3을 차례대로 방출하는 옵저버블을 생성합니다.\n생성 연산자에 대해서는 뒷부분에서 더 자세히 다뤄보겠습니다.</p>\n<p><a href=\"https://rxjs.dev/api/operators/map\"><code class=\"language-text\">map</code></a> 이라고 하는 연산자를 함께 보겠습니다.\n이 연산자는 동일한 이름의 Array 메소드와 유사하죠.\n<code class=\"language-text\">[1, 2, 3].map(x => x * x)</code>이 <code class=\"language-text\">[1, 4, 9]</code>를 생성하듯이, 옵저버블은 다음과 같이 생성됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">,</span> map <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">값: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 로그:</span>\n<span class=\"token comment\">// 값: 1</span>\n<span class=\"token comment\">// 값: 4</span>\n<span class=\"token comment\">// 값: 9</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">1</code>, <code class=\"language-text\">4</code>, <code class=\"language-text\">9</code>를 방출하죠. 다른 유용한 연산자인 <a href=\"https://rxjs.dev/api/operators/first\"><code class=\"language-text\">first</code></a>도 소개해 드리겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">,</span> first <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">값: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 로그:</span>\n<span class=\"token comment\">// 값: 1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>논리적으로 생각해 보면, <code class=\"language-text\">map</code>은 매핑 기능을 제공해야 하므로 즉시 생성되어야 합니다.\n그러나 <code class=\"language-text\">first</code>는 상수가 될 수 있음에도 불구하고 똑같이 즉시 생성되죠.\n일반적으로 모든 연산자는 인수 필요 여부에 관계없이 구성되어 있습니다.</p>\n<h2>파이핑</h2>\n<p>파이프형 연산자들은 함수이기 때문에, 일반 함수들처럼 사용할 <em>수</em> 있습니다.</p>\n<p><code class=\"language-text\">op()(obs)</code></p>\n<p>그러나, 많은 양의 함수들이 합성되면 가독성이 떨어지게 됩니다. 이렇게요.</p>\n<p><code class=\"language-text\">op4()(op3()(op2()(op1()(obs))))</code></p>\n<p>이러한 이유로 옵저버블은 <code class=\"language-text\">.pipe()</code> 메소드를 사용해 동일한 작업을 수행하되, 가독성까지 챙겼죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\">obs<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">op1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">op2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">op3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">op4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>하나의 연산자만 사용하더라도 <code class=\"language-text\">op()(obs)</code> 형태로는 사용되지 않고, <code class=\"language-text\">obs.pipe(op())</code> 형태가 주로 선호됩니다.</p>\n<h2>생성 연산자</h2>\n<p><strong>생성 연산자</strong>는 파이프형 연산자와 달리, 몇 가지 사전 정의된 동작을 이용하거나 다른 옵저버블과 결합함으로써 옵저버블을 생성할 수 있는 함수입니다.</p>\n<p>생성 연산자의 대표적인 예시는 <code class=\"language-text\">interval</code> 함수입니다.\n입력 인수로 (옵저버블이 아닌) 숫자를 받고, 출력으로 옵저버블을 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> interval <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> observable <span class=\"token operator\">=</span> <span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span> <span class=\"token comment\">/* 밀리초 */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><a href=\"#%EC%83%9D%EC%84%B1-%EC%97%B0%EC%82%B0%EC%9E%90\">여기</a> 에 모든 정적 생성 연산자들을 참조해두었습니다.</p>\n<h2>고차원 옵저버블</h2>\n<p>옵저버블은 보통 문자열이나 숫자 같은 일반적인 값들을 방출하지만, 가끔 옵저버블 <em>의</em> 옵저버블, 소위 고차원 옵저버블을 다뤄야 할 때가 있습니다.\n예를 들어, 파일의 URL로 구성된 문자열 옵저버블이 있다고 가정해 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> fileObservable <span class=\"token operator\">=</span> urlObservable<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><code class=\"language-text\">http.get()</code>은 개별 URL에 대해 (문자열 또는 문자열 배열) 옵저버블을 리턴합니다.\n이제 옵저버블 <em>의</em> 옵저버블, 고차원 옵저버블이 준비되었습니다.</p>\n<p>고차원 옵저버블을 다루려면 어떻게 해야 할까요?\n일반적으로는, <em>flattening(평탄화 작업)</em> 을 거쳐 고차원 옵저버블을 일반 옵저버블로 변환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> fileObservable <span class=\"token operator\">=</span> urlObservable<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">concatAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"https://rxjs.dev/api/operators/concatAll\"><code class=\"language-text\">concatAll()</code></a> 연산자는 \"외부\" 옵저버블에서 방출되는 \"내부\" 옵저버블을 구독하고,\n해당 옵저버블이 완료될 때까지 방출된 모든 값을 복사해 다음 옵저버블로 이동합니다.\n모든 값이 이런 방식으로 연결되어 있죠.\n유용한 평탄화 연산자(<a href=\"#%EA%B2%B0%ED%95%A9-%EC%97%B0%EC%82%B0%EC%9E%90\">결합 연산자</a>)에는,</p>\n<ul>\n<li><a href=\"https://rxjs.dev/api/operators/mergeAll\"><code class=\"language-text\">mergeAll()</code></a> — 내부 옵저버블이 도착할 때 구독해서, 다음 값이 도착할 때 방출합니다.</li>\n<li><a href=\"https://rxjs.dev/api/operators/switchAll\"><code class=\"language-text\">switchAll()</code></a> — 첫 번째 내부 옵저버블이 도착하면 첫 번째 내부 옵저버블을 구독하고, 값이 도착하면 방출합니다.\n하지만 다음 내부 옵저버블이 도착하면, 이전 내부 값을 구독 해제하고 새 값을 구독합니다.</li>\n<li><a href=\"https://rxjs.dev/api/operators/exhaustAll\"><code class=\"language-text\">exhaustAll()</code></a> — 첫 번째 내부 옵저버블이 도착하면 첫 번째 내부 옵저버블을 구독하고, 값이 도착하면 방출합니다.\n첫 번째 내부 옵저버블이 완료될 때까지 새로 도착하는 모든 내부 옵저버블을 버리고 다음 내부 옵저버블을 기다립니다.</li>\n</ul>\n<p>대부분의 배열 라이브러리에서 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code class=\"language-text\">map()</code></a> 과\n<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code class=\"language-text\">flat()</code></a> (또는 <code class=\"language-text\">flatten()</code>) 을 합쳐\n<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code class=\"language-text\">flatMap()</code></a> 으로 제공하듯이,\n모든 RxJS의 평탄화 연산자에는 <a href=\"https://rxjs.dev/api/operators/concatMap\"><code class=\"language-text\">concatMap()</code></a>, <a href=\"https://rxjs.dev/api/operators/mergeMap\"><code class=\"language-text\">mergeMap()</code></a>, <a href=\"https://rxjs.dev/api/operators/switchMap\"><code class=\"language-text\">switchMap()</code></a>, <a href=\"https://rxjs.dev/api/operators/exhaustMap\"><code class=\"language-text\">exhaustMap()</code></a>\n과 같이 매핑할 수 있는 연산자가 제공됩니다.</p>\n<h2>Marble diagrams(마블 다이어그램)</h2>\n<p>연산자의 작동 방식을 텍스트로만 설명하기는 어렵습니다.\n많은 연산자들의 동작은 시간과 관련되어 있는데 (예: delay, sample, throttle, debounce)\n이 동작들은 텍스트보단 다이어그램으로 표현하는 게 나은 방법입니다.\n<em>마블 다이어그램</em> 은 연산자의 작동을 시각적으로 표현한 것으로,\n입력 옵저버블(들), 연산자와 연산자의 매개 변수, 출력 옵저버블을 포함하고 있습니다.</p>\n<blockquote>\n<p>마블 다이어그램에서 시간은 오른쪽으로 흐르며,\n옵저버블에서 값(\"마블\")이 방출되는 방식을 설명합니다.</p>\n</blockquote>\n<p>아래는 마블 다이어그램의 설명도입니다.</p>\n<p><img src=\"https://raw.githubusercontent.com/ReactiveX/rxjs/467c4e89ce6f3fcedcf6127ea38d7ce79d32d0f6/docs_app/src/assets/images/guide/marble-diagram-anatomy.svg\" alt=\"마블 다이어그램 설명도\"></p>\n<p>이 문서 사이트(역: RxJS 공식 문서)에서, 마블 다이어그램은 연산자의 작동 방식을 설명하기 위해 광범위하게 사용됩니다.\n물론 다른 컨텍스트(예: 화이트보드, 유닛 테스트)에서도 유용하게 사용될 수 있습니다.</p>\n<h2>연산자 카테고리</h2>\n<p>목적 단위로 연산자를 구분하면, 생성, 변환, 필터링, 결합, 멀티캐스팅, 에러 처리, 유틸리티 등으로 분류할 수 있습니다.\n아래의 목록에서 모든 연산자를 카테고리별로 구분해두었습니다.</p>\n<p>전체 목록은 <a href=\"https://rxjs.dev/api\">이 페이지</a> 에서 볼 수 있습니다.</p>\n<h3><a id=\"생성-연산자\"></a>생성 연산자</h3>\n<ul>\n<li><a href=\"https://rxjs.dev/api/ajax/ajax\"><code class=\"language-text\">ajax</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/bindCallback\"><code class=\"language-text\">bindCallback</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/bindNodeCallback\"><code class=\"language-text\">bindNodeCallback</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/defer\"><code class=\"language-text\">defer</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/empty\"><code class=\"language-text\">empty</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/from\"><code class=\"language-text\">from</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/fromEvent\"><code class=\"language-text\">fromEvent</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/fromEventPattern\"><code class=\"language-text\">fromEventPattern</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/generate\"><code class=\"language-text\">generate</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/interval\"><code class=\"language-text\">interval</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/of\"><code class=\"language-text\">of</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/range\"><code class=\"language-text\">range</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/throwError\"><code class=\"language-text\">throwError</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/timer\"><code class=\"language-text\">timer</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/iif\"><code class=\"language-text\">iif</code></a></li>\n</ul>\n<h3><a id=\"결합-생성-연산자\"></a>결합 생성 연산자</h3>\n<p>결합 생성 연산자는 결합 기능을 갖고 있는 옵저버블 생성 연산자들입니다.\n여러 소스 옵저버블의 값들을 방출하죠.</p>\n<ul>\n<li><a href=\"https://rxjs.dev/api/index/function/combineLatest\"><code class=\"language-text\">combineLatest</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/concat\"><code class=\"language-text\">concat</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/forkJoin\"><code class=\"language-text\">forkJoin</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/merge\"><code class=\"language-text\">merge</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/partition\"><code class=\"language-text\">partition</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/race\"><code class=\"language-text\">race</code></a></li>\n<li><a href=\"https://rxjs.dev/api/index/function/zip\"><code class=\"language-text\">zip</code></a></li>\n</ul>\n<h3>변형 연산자</h3>\n<ul>\n<li><a href=\"https://rxjs.dev/api/operators/buffer\"><code class=\"language-text\">buffer</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/bufferCount\"><code class=\"language-text\">bufferCount</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/bufferTime\"><code class=\"language-text\">bufferTime</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/bufferToggle\"><code class=\"language-text\">bufferToggle</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/bufferWhen\"><code class=\"language-text\">bufferWhen</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/concatMap\"><code class=\"language-text\">concatMap</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/concatMapTo\"><code class=\"language-text\">concatMapTo</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/exhaust\"><code class=\"language-text\">exhaust</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/exhaustMap\"><code class=\"language-text\">exhaustMap</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/expand\"><code class=\"language-text\">expand</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/groupBy\"><code class=\"language-text\">groupBy</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/map\"><code class=\"language-text\">map</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/mapTo\"><code class=\"language-text\">mapTo</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/mergeMap\"><code class=\"language-text\">mergeMap</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/mergeMapTo\"><code class=\"language-text\">mergeMapTo</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/mergeScan\"><code class=\"language-text\">mergeScan</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/pairwise\"><code class=\"language-text\">pairwise</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/partition\"><code class=\"language-text\">partition</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/pluck\"><code class=\"language-text\">pluck</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/scan\"><code class=\"language-text\">scan</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/switchScan\"><code class=\"language-text\">switchScan</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/switchMap\"><code class=\"language-text\">switchMap</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/switchMapTo\"><code class=\"language-text\">switchMapTo</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/window\"><code class=\"language-text\">window</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/windowCount\"><code class=\"language-text\">windowCount</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/windowTime\"><code class=\"language-text\">windowTime</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/windowToggle\"><code class=\"language-text\">windowToggle</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/windowWhen\"><code class=\"language-text\">windowWhen</code></a></li>\n</ul>\n<h3>필터링 연산자</h3>\n<ul>\n<li><a href=\"https://rxjs.dev/api/operators/audit\"><code class=\"language-text\">audit</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/auditTime\"><code class=\"language-text\">auditTime</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/debounce\"><code class=\"language-text\">debounce</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/debounceTime\"><code class=\"language-text\">debounceTime</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/distinct\"><code class=\"language-text\">distinct</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/distinctUntilChanged\"><code class=\"language-text\">distinctUntilChanged</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/distinctUntilKeyChanged\"><code class=\"language-text\">distinctUntilKeyChanged</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/elementAt\"><code class=\"language-text\">elementAt</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/filter\"><code class=\"language-text\">filter</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/first\"><code class=\"language-text\">first</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/ignoreElements\"><code class=\"language-text\">ignoreElements</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/last\"><code class=\"language-text\">last</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/sample\"><code class=\"language-text\">sample</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/sampleTime\"><code class=\"language-text\">sampleTime</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/single\"><code class=\"language-text\">single</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/skip\"><code class=\"language-text\">skip</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/skipLast\"><code class=\"language-text\">skipLast</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/skipUntil\"><code class=\"language-text\">skipUntil</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/skipWhile\"><code class=\"language-text\">skipWhile</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/take\"><code class=\"language-text\">take</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/takeLast\"><code class=\"language-text\">takeLast</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/takeUntil\"><code class=\"language-text\">takeUntil</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/takeWhile\"><code class=\"language-text\">takeWhile</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/throttle\"><code class=\"language-text\">throttle</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/throttleTime\"><code class=\"language-text\">throttleTime</code></a></li>\n</ul>\n<h3><a id=\"결합-연산자\"></a>결합 연산자</h3>\n<p>위의 <a href=\"#%EA%B2%B0%ED%95%A9-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%82%B0%EC%9E%90\">결합 생성 연산자</a> 카테고리도 살펴보세요.</p>\n<ul>\n<li><a href=\"https://rxjs.dev/api/operators/combineLatestAll\"><code class=\"language-text\">combineLatestAll</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/concatAll\"><code class=\"language-text\">concatAll</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/exhaustAll\"><code class=\"language-text\">exhaustAll</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/mergeAll\"><code class=\"language-text\">mergeAll</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/switchAll\"><code class=\"language-text\">switchAll</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/startWith\"><code class=\"language-text\">startWith</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/withLatestFrom\"><code class=\"language-text\">withLatestFrom</code></a></li>\n</ul>\n<h3>멀티캐스팅 연산자</h3>\n<ul>\n<li><a href=\"https://rxjs.dev/api/operators/multicast\"><code class=\"language-text\">multicast</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/publish\"><code class=\"language-text\">publish</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/publishBehavior\"><code class=\"language-text\">publishBehavior</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/publishLast\"><code class=\"language-text\">publishLast</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/publishReplay\"><code class=\"language-text\">publishReplay</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/share\"><code class=\"language-text\">share</code></a></li>\n</ul>\n<h3>에러 처리 연산자</h3>\n<ul>\n<li><a href=\"https://rxjs.dev/api/operators/catchError\"><code class=\"language-text\">catchError</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/retry\"><code class=\"language-text\">retry</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/retryWhen\"><code class=\"language-text\">retryWhen</code></a></li>\n</ul>\n<h3>유틸리티 연산자</h3>\n<ul>\n<li><a href=\"https://rxjs.dev/api/operators/tap\"><code class=\"language-text\">tap</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/delay\"><code class=\"language-text\">delay</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/delayWhen\"><code class=\"language-text\">delayWhen</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/dematerialize\"><code class=\"language-text\">dematerialize</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/materialize\"><code class=\"language-text\">materialize</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/observeOn\"><code class=\"language-text\">observeOn</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/subscribeOn\"><code class=\"language-text\">subscribeOn</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/timeInterval\"><code class=\"language-text\">timeInterval</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/timestamp\"><code class=\"language-text\">timestamp</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/timeout\"><code class=\"language-text\">timeout</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/timeoutWith\"><code class=\"language-text\">timeoutWith</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/toArray\"><code class=\"language-text\">toArray</code></a></li>\n</ul>\n<h3>조건부 연산자</h3>\n<ul>\n<li><a href=\"https://rxjs.dev/api/operators/defaultIfEmpty\"><code class=\"language-text\">defaultIfEmpty</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/every\"><code class=\"language-text\">every</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/find\"><code class=\"language-text\">find</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/findIndex\"><code class=\"language-text\">findIndex</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/isEmpty\"><code class=\"language-text\">isEmpty</code></a></li>\n</ul>\n<h3>수학 연산자</h3>\n<ul>\n<li><a href=\"https://rxjs.dev/api/operators/count\"><code class=\"language-text\">count</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/max\"><code class=\"language-text\">max</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/min\"><code class=\"language-text\">min</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/reduce\"><code class=\"language-text\">reduce</code></a></li>\n</ul>\n<h2>커스텀 연산자 생성하기</h2>\n<h3>새 연산자를 생성하려면...</h3>\n<p><code class=\"language-text\">pipe()</code> 함수를 사용하세요.</p>\n<p>코드에 일반적으로 사용되는 연산자 시퀀스가 있는 경우,\n<code class=\"language-text\">pipe()</code> 함수를 이용해 시퀀스를 새 연산자로 추출하세요.\n흔하지 않은 시퀀스여도 단일 연산자로 나누면 가독성이 향상될 수 있습니다.</p>\n<p>예를 들어, 홀수 값을 삭제하고 짝수 값을 두 배로 하는 함수를 만들어봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> pipe<span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">,</span> map <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">discardOddDoubleEven</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>(<code class=\"language-text\">pipe()</code> 함수는 옵저버블의 <code class=\"language-text\">.pipe()</code> 메서드와 유사하지만 같지는 않습니다.)</p>\n<h3>처음부터 새 연산자 생성하기</h3>\n<p>더 복잡하지만, 기존 연산자의 조합으로 만들 수 없는 연산자가 필요한 경우에는\n다음과 같이 옵저버블 생성자를 사용해 처음부터 연산자를 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable<span class=\"token punctuation\">,</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">delay</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>delayInMillis<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>observable<span class=\"token operator\">:</span> Observable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 이 함수는 옵저버블이 구독될 때마다 호출됩니다.</span>\n      <span class=\"token keyword\">const</span> allTimerIDs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> hasCompleted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> subscription <span class=\"token operator\">=</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 타이머를 시작하여 다음 값을 지연합니다.</span>\n          <span class=\"token keyword\">const</span> timerID <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 값을 push한 후 타이머를 정리합니다.</span>\n            allTimerIDs<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>timerID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 소스가 완료되고, 실행 중인 타이머가 더 이상 없으면</span>\n            <span class=\"token comment\">// 결과 옵저버블을 완료할 수 있습니다.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasCompleted <span class=\"token operator\">&amp;&amp;</span> allTimerIDs<span class=\"token punctuation\">.</span>size <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delayInMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          allTimerIDs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>timerID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 에러를 전파하고 있는지 확인해야 합니다.</span>\n          subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          hasCompleted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// 타이머가 아직 작동 중이라면, 이 코드는 작동되지 않겠죠!</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allTimerIDs<span class=\"token punctuation\">.</span>size <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 해제 로직을 반환합니다.</span>\n      <span class=\"token comment\">// 결과 오류, 완료, 또는 구독 취소 시에 호출됩니다.</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        subscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 타이머를 정리합니다.</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> timerID <span class=\"token keyword\">of</span> allTimerIDs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timerID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 한 번 실행해보세요!</span>\n<span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>다음 사항들을 주의하세요.</p>\n<ol>\n<li><code class=\"language-text\">next()</code>, <code class=\"language-text\">error()</code>, <code class=\"language-text\">complete()</code>의 세 가지 옵저버 기능을 모두 구현하세요.</li>\n<li>옵저버블이 완료되었을 때 정리하는 \"해제\" 기능을 구현하세요(보류 중인 timeout을 구독 취소하고 지울 수 있게요!).</li>\n<li>옵저버블 생성자에 전달된 함수에서 해당 함수를 반환하세요.</li>\n</ol>\n<p>위의 예제는 당연히 예시일 뿐이고, <a href=\"https://rxjs.dev/api/operators/delay\"><code class=\"language-text\">delay()</code></a> 연산자가 이미 준비되어 있습니다.</p>","frontmatter":{"title":"[번역] RxJS 공식 문서 #Operators","date":"2022.04.12","update":"2022.04.12","tags":["RxJS","Reactive Programming"],"series":"RxJS 공식 문서 번역","description":"🇰🇷 Operator, 너는 진짜 누구냐-"},"fields":{"slug":"/rxjs-operators/","readingTime":{"minutes":15.295}}},"seriesList":{"edges":[{"node":{"id":"9da63484-acd9-5100-8fa1-bc2a3475c1ae","fields":{"slug":"/rxjs-overview/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #OVERVIEW"}}},{"node":{"id":"5d406279-db33-5aa2-a888-bfc41706a9ef","fields":{"slug":"/rxjs-observable/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Observable"}}},{"node":{"id":"f76505b5-ec0f-51d7-8acd-c753e834575e","fields":{"slug":"/rxjs-observer/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Observer"}}},{"node":{"id":"83526932-48ad-578e-9a1d-4a9044874ed7","fields":{"slug":"/rxjs-operators/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Operators"}}},{"node":{"id":"da0361fe-dbe1-579e-8fe1-99b9fed97a94","fields":{"slug":"/rxjs-subscription/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Subscription"}}},{"node":{"id":"a67ef73e-23a7-512e-8b1f-67c87b8a430d","fields":{"slug":"/rxjs-subject/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Subject"}}},{"node":{"id":"29cc9f18-6187-56aa-a544-7d4aaedc4978","fields":{"slug":"/rxjs-scheduler/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Scheduler"}}}]},"previous":{"fields":{"slug":"/rxjs-observer/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Observer"}},"next":{"fields":{"slug":"/rxjs-subscription/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Subscription"}}},"pageContext":{"id":"83526932-48ad-578e-9a1d-4a9044874ed7","series":"RxJS 공식 문서 번역","previousPostId":"f76505b5-ec0f-51d7-8acd-c753e834575e","nextPostId":"da0361fe-dbe1-579e-8fe1-99b9fed97a94"}},
    "staticQueryHashes": ["869547123"]}