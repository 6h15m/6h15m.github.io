{
    "componentChunkName": "component---src-templates-post-tsx",
    "path": "/rxjs-scheduler/",
    "result": {"data":{"site":{"siteMetadata":{"title":"영의 시간"}},"markdownRemark":{"id":"29cc9f18-6187-56aa-a544-7d4aaedc4978","excerpt":"프롤로그 안녕하세요! 제로입니다.\n이번에 번역해본 문서는 특별한 옵저버블인 Scheduler 가이드 입니다.\n공식 가이드 문서를 모두 번역하는 날이 얼마 남지 않았네요! 계속 달려보겠습니다- 💨 Scheduler(스케쥴러) 소개 Scheduler는 구독 시작 타이밍과 알림 전달 타이밍을 제어합니다.\nScheduler는 아래 세 가지로 구성되어 있는데요, …","html":"<h2>프롤로그</h2>\n<p>안녕하세요! 제로입니다.\n이번에 번역해본 문서는 특별한 옵저버블인 <a href=\"https://rxjs.dev/guide/scheduler\">Scheduler 가이드</a> 입니다.\n공식 가이드 문서를 모두 번역하는 날이 얼마 남지 않았네요! 계속 달려보겠습니다- 💨</p>\n<h2>Scheduler(스케쥴러) 소개</h2>\n<p><strong>Scheduler</strong>는 구독 시작 타이밍과 알림 전달 타이밍을 제어합니다.\nScheduler는 아래 세 가지로 구성되어 있는데요,</p>\n<ul>\n<li><strong>Scheduler는 데이터 구조입니다.</strong> 우선 순위 또는 기준에 따라 작업을 저장하고, 대기시킬 수 있습니다.</li>\n<li><strong>Scheduler는 실행 컨텍스트입니다.</strong> 작업이 실행되는 위치 및 시간을 나타내죠.\n(예: 즉시 실행 또는 setTimeout, process.nextTick, animation frame 같은 콜백 매커니즘)</li>\n<li><strong>Scheduler에는 (가상의) 시계가 있습니다.</strong> 스케쥴러는 getter 메소드 <code class=\"language-text\">now()</code>로 \"시간\" 개념을 제공합니다.\n특정 scheduler에서 스케쥴링되는 작업은 해당 시계로 표시된 시간에 적용되죠.</li>\n</ul>\n<blockquote>\n<p>Scheduler는 옵저버블이 옵저버에 알림을 전달할 실행 컨텍스트를 정의할 수 있습니다.</p>\n</blockquote>\n<p>예시로, 값 <code class=\"language-text\">1</code>, <code class=\"language-text\">2</code>, <code class=\"language-text\">3</code>을 동기적으로 방출하는 간단한 옵저버블과 <code class=\"language-text\">observeOn</code> 연산자를 사용해\n해당 값들을 전달하는 데 사용할 <code class=\"language-text\">async</code> Scheduler를 정의해보겠습니다.</p>\n<!-- prettier-ignore -->\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable<span class=\"token punctuation\">,</span> observeOn<span class=\"token punctuation\">,</span> asyncScheduler <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rxjs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">observeOn</span><span class=\"token punctuation\">(</span>asyncScheduler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'구독 직전!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobservable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'값 '</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'문제가 발생했습니다: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'완료'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'구독 직후!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>출력된 값은 이렇습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-none line-numbers\"><code class=\"language-none\">구독 직전!\n구독 직후!\n값 1\n값 2\n값 3\n완료</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>지금까지와는 다르게, <code class=\"language-text\">값 ...</code> 알림이 <code class=\"language-text\">구독 직후!</code> 알림보다 늦게 전달되었죠?\n이는 <code class=\"language-text\">observeOn(asyncScheduler)</code>이 <code class=\"language-text\">new Observable</code>과 마지막 옵저버 사이에 중간 옵저버를 두기 때문입니다.\n조금 더 명확하게 알아보기 위해서, 예제 코드를 살짝 바꾸어 보겠습니다.</p>\n<!-- prettier-ignore -->\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable<span class=\"token punctuation\">,</span> observeOn<span class=\"token punctuation\">,</span> asyncScheduler <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rxjs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>proxyObserver<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  proxyObserver<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  proxyObserver<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  proxyObserver<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  proxyObserver<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">observeOn</span><span class=\"token punctuation\">(</span>asyncScheduler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> finalObserver <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'값 '</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'문제가 발생했습니다: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'완료'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'구독 직전!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobservable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>finalObserver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'구독 직후!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">observeOn(asyncScheduler)</code>에서 생성된 <code class=\"language-text\">proxyObserver</code>의 <code class=\"language-text\">next(val)</code> 함수는 대략 이렇습니다.</p>\n<!-- prettier-ignore -->\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> proxyObserver <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    asyncScheduler<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> finalObserver<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">0</span> <span class=\"token comment\">/* delay */</span><span class=\"token punctuation\">,</span>\n      val <span class=\"token comment\">/* 위 함수의 x가 될 예정 */</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>주어진 <code class=\"language-text\">delay</code> 값이 0이어도, <code class=\"language-text\">async</code> Scheduler는 <code class=\"language-text\">setTimeout</code> 또는 <code class=\"language-text\">setInterval</code>로 작동합니다.\n일반적으로 JavaScript에서 <code class=\"language-text\">setTimeout(fn, 0)</code>은 다음 이벤트 루프에서 <code class=\"language-text\">fn</code> 함수를 제일 먼저 실행합니다.\n이것이 <code class=\"language-text\">구독 직후!</code> 발생 이후에 <code class=\"language-text\">값 1</code>이 <code class=\"language-text\">finalObserver</code>로 전달되는 이유를 설명하죠.</p>\n<p>Scheduler의 <code class=\"language-text\">schedule()</code> 메소드는 scheduler 내부의 시계에 상대적인 시간의 양을 전달하는 <code class=\"language-text\">delay</code> 인수를 받습니다.\n<code class=\"language-text\">delay</code>와 같은 시간 연산자가 실제 시간이 아니라 scheduler 시계의 시간에 의해서 작동되는 이유는, 위와 같이 Scheduler의 시계는 실제 시간과 관련이 없기 때문입니다.\n이 동작은 특히 <em>가상 시계 Scheduler</em> 가 실제로 예정된 작업을 동기적으로 실행하는 동안\n가짜 시계의 시간을 위조해야 하는 상황의 테스트를 진행할 때 유용합니다.</p>\n<h2>Scheduler 타입들</h2>\n<p><code class=\"language-text\">async(비동기)</code> Scheduler는 RxJS에서 제공하는 내장 scheduler 중 하나입니다.</p>\n<table>\n<thead>\n<tr>\n<th>Scheduler</th>\n<th>목적</th>\n<th>사용 예시</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">null</code></td>\n<td>Scheduler를 전달하지 않아서 동기적, 재귀적으로 알림을 전달합니다.</td>\n<td>상수 시간 연산, 꼬리 재귀 연산</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">queueScheduler</code></td>\n<td>현재 event frame의 queue에서 동작합니다.</td>\n<td>반복적인 작업</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">asapScheduler</code></td>\n<td>Promise와 동일한 queue인 micro task queue에서 동작합니다. (보통 현재 작업 이후-다음 작업 이전)</td>\n<td>비동기 변환</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">asyncScheduler</code></td>\n<td><code class=\"language-text\">setInterval</code>과 함께 동작합니다.</td>\n<td>시간 기반의 연산</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">animationFrameScheduler</code></td>\n<td>다음 브라우저 콘텐츠를 다시 그리기 직전에 동작합니다.</td>\n<td>부드러운 브라우저 애니메이션</td>\n</tr>\n</tbody>\n</table>\n<h2>Scheduler의 사용</h2>\n<p>어쩌면 여러분은 이미 RxJS 코드에서 scheduler를 사용했을 수도 있습니다.\n동시성을 다루는 모든 옵저버블 연산자가 optional하게 scheduler를 갖고 있기 때문이죠.\nscheduler를 작성하지 않으면, RxJS는 최소 동시성 원칙(연산자의 요구를 만족시키는 최소한의 동시성을 도입)에 의해 기본 scheduler를 선택합니다.</p>\n<p>예를 들어, 유한하고 적은 수의 메세지를 다루는 옵저버블을 리턴하는 연산자엔 <code class=\"language-text\">null</code> 이나 <code class=\"language-text\">undefined</code>와 같이 scheduler를 사용하지 않는 것을 선택합니다.\n잠재적으로 많거나 무한대의 메세지를 반환하는 연산자의 경우, <code class=\"language-text\">queue</code> Scheduler를 선택하고,\n타이머를 사용하는 연산자는 <code class=\"language-text\">async</code> Scheduler를 선택합니다.</p>\n<p>RxJS는 동시성 scheduler를 최소 용도로만 사용하기 때문에, 성능을 위해 동시성을 도입하려는 경우 다른 scheduler를 선택할 수 있습니다.\n특정 scheduler를 지정하려면, scheduler를 인수로 받는 연산자 메서드를 사용하면 됩니다(예: <code class=\"language-text\">from([10, 20, 30], asyncScheduler)</code>).</p>\n<p><strong>정적 생성 연산자는 Scheduler를 인수로 받습니다.</strong>\n예를 들어, <code class=\"language-text\">from(array, scheduler)</code>은 <code class=\"language-text\">array</code>에서 변환된 각 알림을 전달할 때 사용할 scheduler를 지정할 수 있습니다.\n일반적으로 scheduler는 연산자의 마지막 인수입니다. 아래의 정적 생성 연산자들은 Scheduler를 인수로 받습니다.</p>\n<ul>\n<li><code class=\"language-text\">bindCallback</code></li>\n<li><code class=\"language-text\">bindNodeCallback</code></li>\n<li><code class=\"language-text\">combineLatest</code></li>\n<li><code class=\"language-text\">concat</code></li>\n<li><code class=\"language-text\">empty</code></li>\n<li><code class=\"language-text\">from</code></li>\n<li><code class=\"language-text\">fromPromise</code></li>\n<li><code class=\"language-text\">interval</code></li>\n<li><code class=\"language-text\">merge</code></li>\n<li><code class=\"language-text\">of</code></li>\n<li><code class=\"language-text\">range</code></li>\n<li><code class=\"language-text\">throw</code></li>\n<li><code class=\"language-text\">timer</code></li>\n</ul>\n<p><strong><code class=\"language-text\">subscribeOn</code>으로 <code class=\"language-text\">subscribe()</code> 호출이 발생할 타이밍을 예약하세요.</strong>\n기본적으로 옵저버블의 <code class=\"language-text\">subscribe()</code> 호출은 즉시, 동기적으로 발생합니다.\n그러나 인스턴스 연산자 <code class=\"language-text\">subscribeOn(scheduler)</code>을 사용하면 지정된 Scheduler에서 실제 구독이 발생하는 타이밍을 지연하거나 예약할 수 있습니다.\n여기서 <code class=\"language-text\">scheduler</code>를 인수로 제공해야 합니다.</p>\n<p><strong><code class=\"language-text\">observeOn</code>으로 알림이 전달되는 타이밍을 예약하세요.</strong>\n위의 예제에서 보았던 것처럼 인스턴스 연산자 <code class=\"language-text\">observeOn(scheduler)</code>은 옵저버와 소스 옵저버블 사이에 지정된 <code class=\"language-text\">scheduler</code>를 사용해 대상 옵저버에 대한 호출을 예약하는 중간 옵저버를 둡니다.</p>\n<p><strong>인스턴스 연산자는 Scheduler를 인수로 받을 수 있습니다.</strong></p>\n<p><code class=\"language-text\">bufferTime</code>, <code class=\"language-text\">debounceTime</code>, <code class=\"language-text\">delay</code>, <code class=\"language-text\">auditTime</code>, <code class=\"language-text\">sampleTime</code>, <code class=\"language-text\">throttleTime</code>, <code class=\"language-text\">timeInterval</code>, <code class=\"language-text\">timeout</code>, <code class=\"language-text\">timeoutWith</code>, <code class=\"language-text\">windowTime</code> 같은 시간 관련 연산자들은\n마지막 인수로 Scheduler를 받거나 <code class=\"language-text\">asyncScheduler</code> 위에서 작동합니다.</p>\n<p>마지막 인수로 Scheduler를 받는 다른 인스턴스 연산자에는 <code class=\"language-text\">cache</code>, <code class=\"language-text\">combineLatest</code>, <code class=\"language-text\">concat</code>, <code class=\"language-text\">expand</code>, <code class=\"language-text\">merge</code>, <code class=\"language-text\">publishReplay</code>, <code class=\"language-text\">startWith</code>가 있습니다.</p>\n<p><code class=\"language-text\">cache</code>와 <code class=\"language-text\">publishReplay</code>는 모두 ReplaySubject를 사용하기 때문에 Scheduler를 인수로 받습니다.\nReplaySubject가 시간을 다룰 수 있기 때문에 ReplaySubject의 생성자는 (optional)Scheduler를 마지막 인수로 사용합니다.\n기본적으로 ReplaySubject는 <code class=\"language-text\">queue</code> Scheduler를 통해 시간을 제공합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pluckDeep</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">obj</span> <span class=\"token operator\">=></span> key<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accum<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> accum<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>fns</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> fns<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accum<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>accum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unfold</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> seed</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">go</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">,</span> acc</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res <span class=\"token operator\">?</span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> acc\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"[번역] RxJS 공식 문서 #Scheduler","date":"2022.04.12","update":"2022.04.12","tags":["RxJS","Reactive Programming"],"series":"RxJS 공식 문서 번역","description":"🇰🇷 RxJS의 컨트롤타워, Scheduler에 대해서 알아보자-"},"fields":{"slug":"/rxjs-scheduler/","readingTime":{"minutes":9.565}}},"seriesList":{"edges":[{"node":{"id":"9da63484-acd9-5100-8fa1-bc2a3475c1ae","fields":{"slug":"/rxjs-overview/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #OVERVIEW"}}},{"node":{"id":"5d406279-db33-5aa2-a888-bfc41706a9ef","fields":{"slug":"/rxjs-observable/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Observable"}}},{"node":{"id":"f76505b5-ec0f-51d7-8acd-c753e834575e","fields":{"slug":"/rxjs-observer/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Observer"}}},{"node":{"id":"83526932-48ad-578e-9a1d-4a9044874ed7","fields":{"slug":"/rxjs-operators/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Operators"}}},{"node":{"id":"da0361fe-dbe1-579e-8fe1-99b9fed97a94","fields":{"slug":"/rxjs-subscription/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Subscription"}}},{"node":{"id":"a67ef73e-23a7-512e-8b1f-67c87b8a430d","fields":{"slug":"/rxjs-subject/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Subject"}}},{"node":{"id":"29cc9f18-6187-56aa-a544-7d4aaedc4978","fields":{"slug":"/rxjs-scheduler/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Scheduler"}}}]},"previous":{"fields":{"slug":"/rxjs-subject/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Subject"}},"next":null},"pageContext":{"id":"29cc9f18-6187-56aa-a544-7d4aaedc4978","series":"RxJS 공식 문서 번역","previousPostId":"a67ef73e-23a7-512e-8b1f-67c87b8a430d","nextPostId":null}},
    "staticQueryHashes": ["869547123"]}