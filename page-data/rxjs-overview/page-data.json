{
    "componentChunkName": "component---src-templates-post-tsx",
    "path": "/rxjs-overview/",
    "result": {"data":{"site":{"siteMetadata":{"title":"영의 시간"}},"markdownRemark":{"id":"9da63484-acd9-5100-8fa1-bc2a3475c1ae","excerpt":"프롤로그 안녕하세요! 제로입니다.\n최근 RxJS를 사용할 일이 생겨 열심히 학습하던 중, Learn RxJS 라는 문서를 발견해 번역해보고 있었어요.\n공식 문서보다 조금 더 알기 쉽게 설명되어 있는 것 같아 학습에 큰 도움이 되었지만,\nv6 이후로 업데이트되지 않아 deprecated 된 자료들이 꽤 많았습니다. 저희의 Learn RxJS 가 정확한 학습…","html":"<h2>프롤로그</h2>\n<p>안녕하세요! 제로입니다.\n최근 RxJS를 사용할 일이 생겨 열심히 학습하던 중, <a href=\"https://www.learnrxjs.io/\">Learn RxJS</a> 라는 문서를 발견해 번역해보고 있었어요.\n공식 문서보다 조금 더 알기 쉽게 설명되어 있는 것 같아 학습에 큰 도움이 되었지만,\nv6 이후로 업데이트되지 않아 deprecated 된 자료들이 꽤 많았습니다.</p>\n<p><a href=\"https://chasethestar.gitbook.io/ko.learn-rxjs\">저희의 Learn RxJS</a> 가 정확한 학습 자료로 거듭나려면\n<strong>공식 문서를 먼저 학습해야겠다</strong>는 판단이 생기게 되었고, <a href=\"https://rxjs.dev/guide/overview\">OVERVIEW</a>에 해당하는 영역부터 번역<del>의역</del>해나가 보려고 합니다.</p>\n<h2>RxJS 소개</h2>\n<p>RxJS는 <a href=\"https://6h15m.github.io/rxjs-observable\">Observable(옵저버블)</a> 시퀀스를 이용해 비동기 및 이벤트 기반 프로그램을 구성하기 위한 라이브러리입니다.\n옵저버블, 옵저버블에 종속되는 타입들(Observer, Schedulers, Subjects),\n<code class=\"language-text\">Array</code> 메소드(<code class=\"language-text\">map</code>, <code class=\"language-text\">filter</code>, <code class=\"language-text\">reduce</code>, <code class=\"language-text\">every</code> 등)에서 영감받은 Operator(연산자)를 제공하여\n비동기 이벤트를 콜렉션처럼 다룰 수 있게 하죠.</p>\n<blockquote>\n<p>이벤트 처리를 위한 Lodash, <strong>RxJS</strong></p>\n</blockquote>\n<p>ReactiveX는 이벤트 시퀀스를 관리하는 이상적인 방법으로 <a href=\"https://en.wikipedia.org/wiki/Observer_pattern\">옵저버 패턴</a>,\n<a href=\"https://en.wikipedia.org/wiki/Iterator_pattern\">이터레이터 패턴</a>,\n<a href=\"http://martinfowler.com/articles/collection-pipeline/#NestedOperatorExpressions\">콜렉션을 다루는 함수형 프로그래밍</a> 을 결합하는 것을 택했습니다.</p>\n<h3>비동기 이벤트를 관리하는 RxJS의 필수 개념</h3>\n<ul>\n<li><strong>Observable</strong> - <code class=\"language-text\">옵저버블</code>: 호출 가능한 미래의 값 또는 이벤트에 대한 집합</li>\n<li><strong>Observer</strong> - <code class=\"language-text\">옵저버</code>: 옵저버블이 제공하는 값을 소비할 수 있는 콜백 함수의 집합</li>\n<li><strong>Subscription</strong> - <code class=\"language-text\">구독</code>: 옵저버블의 실행</li>\n<li><strong>Operators</strong> - <code class=\"language-text\">연산자</code>: <code class=\"language-text\">map</code>, <code class=\"language-text\">filter</code>, <code class=\"language-text\">concat</code>, <code class=\"language-text\">reduce</code> 같은 연산으로 컬렉션을 처리(함수형 프로그래밍 스타일)하는 순수함수</li>\n<li><strong>Subject</strong> - <code class=\"language-text\">서브젝트</code>: EventEmitter와 동일하게, 값 또는 이벤트를 여러 옵저버에 멀티캐스팅할 수 있게 하는 옵저버블의 한 종류</li>\n<li><strong>Schedulers</strong> - <code class=\"language-text\">스케쥴러</code>: 동시성을 제어하는 중앙 집중적인 스케쥴러(예: <code class=\"language-text\">setTimeout</code> 또는 <code class=\"language-text\">requestAnimationFrame</code> 등의 연산이 발생했을 때 조정이 가능하게 함)</li>\n</ul>\n<h2>예제로 알아보는 RxJS</h2>\n<p>보통은, 이벤트 리스너를 등록하죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"클릭하셨네요!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>RxJS를 사용한다면 이벤트 리스너 대신 옵저버블을 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fromEvent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"클릭하셨네요!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>순수성</h3>\n<p>RxJS가 강력한 이유는 순수함수를 이용해 값을 생성할 수 있기 때문입니다.\n이는 오류가 발생할 가능성이 낮다는 뜻이죠.</p>\n<p>일반적으로 우리는 '순수하지 않은', 다른 상태까지 망칠 수 있는 함수를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">++</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">번이나 클릭하셨군요!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>RxJS를 사용한다면 상태는 서로 격리됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fromEvent<span class=\"token punctuation\">,</span> scan <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">번이나 클릭하셨군요!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>scan</strong> 연산자는 배열의 <strong>reduce</strong>와 유사하게 동작해,\n리턴된 콜백 함수의 값은 다음 콜백 함수의 매개 변수가 됩니다.</p>\n<h3>유동성</h3>\n<p>RxJS의 연산자들은 옵저버블을 통과하는 이벤트들의 흐름을 제어합니다. (종류도 다양하죠!)</p>\n<p>Plain JavaScript로 초당 최대 한 번으로 클릭을 제한하는 기능을 구현해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> rate <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> lastClick <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> rate<span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> lastClick <span class=\"token operator\">>=</span> rate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">++</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">번 클릭하셨어요!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    lastClick <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>RxJS로도 구현해볼게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fromEvent<span class=\"token punctuation\">,</span> throttleTime<span class=\"token punctuation\">,</span> scan <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">throttleTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">번 클릭하셨어요!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>다른 흐름 제어 연산자에는 <a href=\"https://rxjs.dev/api/operators/filter\"><strong>filter</strong></a>,\n<a href=\"https://rxjs.dev/api/operators/delay\"><strong>delay</strong></a>,\n<a href=\"https://rxjs.dev/api/operators/debounceTime\"><strong>debounceTime</strong></a>,\n<a href=\"https://rxjs.dev/api/operators/take\"><strong>take</strong></a>,\n<a href=\"https://rxjs.dev/api/operators/takeUntil\"><strong>takeUntil</strong></a>,\n<a href=\"https://rxjs.dev/api/operators/distinct\"><strong>distinct</strong></a>,\n<a href=\"https://rxjs.dev/api/operators/distinctUntilChanged\"><strong>distinctUntilChanged</strong></a> 등이 있습니다.</p>\n<h3>값</h3>\n<p>RxJS에서는 옵저버블을 통과하는 값들을 변환할 수 있습니다.</p>\n<p>Plain JavaScript로 클릭할 때마다 현재 마우스의 x 좌표를 더하는 기능을 구현해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rate <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> lastClick <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> rate<span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> lastClick <span class=\"token operator\">>=</span> rate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    count <span class=\"token operator\">+=</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    lastClick <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>RxJS로도 구현해볼게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fromEvent<span class=\"token punctuation\">,</span> throttleTime<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">,</span> scan <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">throttleTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> clientX<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count <span class=\"token operator\">+</span> clientX<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>다른 값 관련 연산자에는 <a href=\"https://rxjs.dev/api/operators/pluck\"><strong>pluck</strong></a>, <a href=\"https://rxjs.dev/api/operators/pairwise\"><strong>pairwise</strong></a>, <a href=\"https://rxjs.dev/api/operators/sample\"><strong>sample</strong></a> 등이 있습니다.</p>","frontmatter":{"title":"[번역] RxJS 공식 문서 #OVERVIEW","date":"2022.04.06","update":"2022.04.06","tags":["RxJS","Reactive Programming"],"series":"RxJS 공식 문서 번역","description":"🇰🇷 RxJS가 뭐예요?"},"fields":{"slug":"/rxjs-overview/","readingTime":{"minutes":5.8}}},"seriesList":{"edges":[{"node":{"id":"9da63484-acd9-5100-8fa1-bc2a3475c1ae","fields":{"slug":"/rxjs-overview/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #OVERVIEW"}}},{"node":{"id":"5d406279-db33-5aa2-a888-bfc41706a9ef","fields":{"slug":"/rxjs-observable/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Observable"}}},{"node":{"id":"f76505b5-ec0f-51d7-8acd-c753e834575e","fields":{"slug":"/rxjs-observer/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Observer"}}}]},"previous":{"fields":{"slug":"/github-snake/"},"frontmatter":{"title":"Github 프로필에 잔디 먹는 뱀 추가하기"}},"next":{"fields":{"slug":"/rxjs-observable/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Observable"}}},"pageContext":{"id":"9da63484-acd9-5100-8fa1-bc2a3475c1ae","series":"RxJS 공식 문서 번역","previousPostId":"aa7302a3-92bf-57d1-a39e-894de5b6f07c","nextPostId":"5d406279-db33-5aa2-a888-bfc41706a9ef"}},
    "staticQueryHashes": ["869547123"]}