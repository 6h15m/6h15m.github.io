{
    "componentChunkName": "component---src-templates-post-tsx",
    "path": "/core-javascript-1/",
    "result": {"data":{"site":{"siteMetadata":{"title":"영의 시간"}},"markdownRemark":{"id":"c261dddd-81dc-51a7-8a79-63e02ff6f7fe","excerpt":"프롤로그 안녕하세요! 제로입니다. 주말에 읽어볼 책을 고르던 중, 문득 첫 면접의 기억이 떠올랐습니다. 제로 님은 자바스크립트를 몇 퍼센트 정도 알고 있다고 생각하시나요? ㄴ 10%요!(당당) 웹 프론트엔드 개발자로 일하게 된 지 0.5년차가 된 지금도 제 답변이 진실되게 느껴지네요.\n자바스크립트의 동작 원리를 상세하게 알지 못하니, 실무에서 직관적이지 …","html":"<h2>프롤로그</h2>\n<p>안녕하세요! 제로입니다.<br>\n주말에 읽어볼 책을 고르던 중, 문득 첫 면접의 기억이 떠올랐습니다.</p>\n<blockquote>\n<p>제로 님은 자바스크립트를 몇 퍼센트 정도 알고 있다고 생각하시나요?<br>\nㄴ <strong>10%요!(당당)</strong></p>\n</blockquote>\n<p>웹 프론트엔드 개발자로 일하게 된 지 0.5년차가 된 지금도 제 답변이 진실되게 느껴지네요.\n자바스크립트의 동작 원리를 상세하게 알지 못하니, 실무에서 직관적이지 않은 에러를 디버깅할 때\n꽤 어려움을 겪었습니다.</p>\n<p>자바스크립트를 20% 아는 개발자가 되기 위해, 중급 자바스크립트 개발자에게 권해지는 정재남 님의 <a href=\"https://ridibooks.com/books/1160000021?_rdt_sid=category_bestsellers&#x26;_rdt_idx=6\">&#x3C;코어 자바스크립트></a>\n를 읽기로 결정했습니다!</p>\n<p>책의 첫 번째 챕터, <strong>데이터 타입</strong>의 내용을 제 방식대로 정리해 보았습니다.</p>\n<h2>기본형과 참조형</h2>\n<p>자바스크립트의 데이터 타입에는 기본형(<code class=\"language-text\">number</code>, <code class=\"language-text\">string</code>, <code class=\"language-text\">boolean</code>...)과 참조형(<code class=\"language-text\">object</code>, <code class=\"language-text\">array</code>, <code class=\"language-text\">function</code>...)이 있습니다.\n기본형은 값이 담긴 주솟값을 <strong>바로 복제</strong>하고, 참조형은 값이 담긴 <strong>주솟값들로 이루어진 묶음을 가르키는 주솟값을 복제</strong>합니다.</p>\n<h3>불변값</h3>\n<p>변수와 상수를 구분 짓는 변경 가능성의 대상은 <strong>변수</strong> 영역 메모리이고,\n불변성 여부를 구분하는 변경 가능성의 대상은 <strong>데이터</strong> 영역 메모리입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>변수 <code class=\"language-text\">a</code>는 7로 값이 변경될 수 있습니다. 그럼에도 불구하고 <code class=\"language-text\">number</code>는 불변값입니다.<br>\n데이터 상으로 보았을 때, 처음에 <code class=\"language-text\">a</code>에 할당된 것은 10이 아닌 10의 주솟값입니다.\n7로 값을 변경하려고 하면 <code class=\"language-text\">a</code>는 7의 주솟값으로 바꿔 할당될 뿐 10이라는 값은 그대로 남아있게 됩니다.</p>\n<p>모든 기본형 데이터는 불변값입니다. 반대로, 참조형은 기본적으로 <strong>가변값</strong>입니다. (불변값으로 설정할 수도 있습니다-)</p>\n<h3>가변값</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Zero\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">job</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Web Front-end Developer\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">;</span>\n\nb <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\nobj2<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"One\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위의 예제에서, 불변값인 <code class=\"language-text\">a</code>와 <code class=\"language-text\">b</code>는</p>\n<ol>\n<li>값 10을 가진 주솟값을 함께 바라보고 있다가</li>\n<li><code class=\"language-text\">b</code>가 값 15를 가진 주솟값을 바라보게 되면서</li>\n<li><code class=\"language-text\">a !== b</code>가 성립됩니다.</li>\n</ol>\n<p>반면에 가변값인 <code class=\"language-text\">obj1</code>과 <code class=\"language-text\">obj2</code>는</p>\n<ol>\n<li><code class=\"language-text\">name</code> 과 <code class=\"language-text\">job</code>의 주솟값들로 이루어진 묶음의 주솟값을 바라보고 있다가</li>\n<li><code class=\"language-text\">obj2</code> 의 <code class=\"language-text\">name</code> 값이 변하여, <code class=\"language-text\">name</code> 이 값 \"One\"을 가진 주솟값을 바라보게 됩니다.</li>\n<li>하지만 <code class=\"language-text\">obj1</code>과 <code class=\"language-text\">obj2</code>가 갖는 주솟값은 변하지 않았으므로,</li>\n<li><code class=\"language-text\">obj1 === obj2</code>가 성립됩니다.</li>\n</ol>\n<p>객체의 property가 변경될 때, 즉 <code class=\"language-text\">obj2</code>의 상황에서 <code class=\"language-text\">obj1 !== obj2</code>를 성립시키고 싶다면\n<strong>깊은 복사</strong>를 통해 <strong>불변 객체</strong>를 생성하는 방법으로 해결할 수 있습니다.</p>\n<h2>null vs undefined</h2>\n<p>자바스크립트 엔진이 자동으로 <code class=\"language-text\">undefined</code>를 지정하는 경우는 세 가지입니다.</p>\n<ul>\n<li>값을 대입하지 않은 변수에 접근할 때</li>\n<li>객체 내부의 존재하지 않는 property에 접근하려고 할 때</li>\n<li>return 문이 없거나 호출되지 않는 함수의 실행 결과</li>\n</ul>\n<p>명시적으로 <code class=\"language-text\">undefined</code>를 지정할 때와의 차이점은, 이 경우에서 <code class=\"language-text\">undefined</code>는 어딘가에 실존하는 값이지만\n자동으로 지정되는 경우에서는 그저 값이 없음을 나타내는 역할만 합니다. 이 복잡함을 방지하기 위해서,\n책에서는 <code class=\"language-text\">undefined</code> 대신 같은 의미를 가진 <code class=\"language-text\">null</code>의 사용을 권장합니다.</p>\n<h3>null 사용 시 주의사항</h3>\n<p>자바스크립트의 자체 버그로, <code class=\"language-text\">typeof null</code>은 <code class=\"language-text\">object</code> 입니다.\n따라서, <code class=\"language-text\">null</code> 값 여부를 판별해야 한다면 <code class=\"language-text\">typeof</code> 대신 다른 방법을 사용해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"[도서] 코어 자바스크립트 - #1 데이터 타입","date":"2022.05.30","update":"2022.05.30","tags":["JavaScript"],"series":"코어 자바스크립트","description":"🩻 딥한 JS 지식의 첫걸음"},"fields":{"slug":"/core-javascript-1/","readingTime":{"minutes":5.42}}},"seriesList":{"edges":[{"node":{"id":"c261dddd-81dc-51a7-8a79-63e02ff6f7fe","fields":{"slug":"/core-javascript-1/"},"frontmatter":{"title":"[도서] 코어 자바스크립트 - #1 데이터 타입"}}}]},"previous":{"fields":{"slug":"/rxjs-scheduler/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Scheduler"}},"next":null},"pageContext":{"id":"c261dddd-81dc-51a7-8a79-63e02ff6f7fe","series":"코어 자바스크립트","previousPostId":"29cc9f18-6187-56aa-a544-7d4aaedc4978","nextPostId":null}},
    "staticQueryHashes": ["869547123"]}