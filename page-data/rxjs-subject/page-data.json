{
    "componentChunkName": "component---src-templates-post-tsx",
    "path": "/rxjs-subject/",
    "result": {"data":{"site":{"siteMetadata":{"title":"영의 시간"}},"markdownRemark":{"id":"a67ef73e-23a7-512e-8b1f-67c87b8a430d","excerpt":"프롤로그 안녕하세요! 제로입니다.\n이번에 번역해본 문서는 특별한 옵저버블인 Subject 가이드 입니다.\n여러 형태를 가지고 있는 다양한 Subject들을 함께 배워봅시다! Subject 소개 Subject는 여러 옵저버에 값을 멀티캐스팅할 수 있는 특별한 옵저버블입니다.\n일반 옵저버블이 유니캐스트(구독한 옵저버는 옵저버블의 독립적인 실행을 갖는 방식)라…","html":"<h2>프롤로그</h2>\n<p>안녕하세요! 제로입니다.\n이번에 번역해본 문서는 특별한 옵저버블인 <a href=\"https://rxjs.dev/guide/subject\">Subject 가이드</a> 입니다.\n여러 형태를 가지고 있는 다양한 Subject들을 함께 배워봅시다!</p>\n<h2>Subject 소개</h2>\n<p><strong>Subject</strong>는 여러 옵저버에 값을 멀티캐스팅할 수 있는 특별한 옵저버블입니다.\n일반 옵저버블이 유니캐스트(구독한 옵저버는 옵저버블의 독립적인 실행을 갖는 방식)라면, Subject는 멀티캐스트입니다.</p>\n<blockquote>\n<p>Subject는 많은 옵저버에 멀티캐스팅할 수 있는 옵저버블입니다. EventEmitter처럼 여러 리스너의 등록을 유지하죠.</p>\n</blockquote>\n<p><strong>모든 Subject는 옵저버블입니다.</strong> Subject가 주어지면 이를 <code class=\"language-text\">구독</code>할 수 있으며, 옵저버를 제공할 수 있습니다.\n옵저버는 옵저버블 실행이 일반 유니캐스트 옵저버블에서 왔는지, 혹은 Subject에서 왔는지 구분할 수 없습니다.</p>\n<p>Subject 내부적으로 <code class=\"language-text\">구독</code>은 값을 전달하는 새 실행을 호출하지 않습니다.\n일반적으로 다른 라이브러리나 언어에서 <code class=\"language-text\">addListener</code>가 작동하는 방식과 유사하게, 주어진 옵저버를 옵저버 목록에 등록할 뿐이죠.</p>\n<p><strong>모든 Subject는 옵저버입니다.</strong> Subject는 <code class=\"language-text\">next(v)</code>, <code class=\"language-text\">error(e)</code>, <code class=\"language-text\">complete()</code> 메소드를 가진 객체입니다.\nSubject에 새로운 값을 입력하려고 <code class=\"language-text\">next(theValue)</code>를 호출하면, Subject에 등록된 옵저버들에 멀티캐스팅됩니다.</p>\n<p>예시로, 두 옵저버가 등록된 Subject에 몇 가지 값을 입력해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Subject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">옵저버A: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">옵저버B: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 로그:</span>\n<span class=\"token comment\">// 옵저버A: 1</span>\n<span class=\"token comment\">// 옵저버B: 1</span>\n<span class=\"token comment\">// 옵저버A: 2</span>\n<span class=\"token comment\">// 옵저버B: 2</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Subject는 옵저버이기 때문에, 옵저버블의 <code class=\"language-text\">subscribe</code> 메소드 인수로 Subject를 전달할 수도 있습니다. 아래의 예시처럼요!</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Subject<span class=\"token punctuation\">,</span> from <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">옵저버A: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">옵저버B: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observable <span class=\"token operator\">=</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobservable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Subject를 전달해 구독해봅시다!</span>\n\n<span class=\"token comment\">// 로그:</span>\n<span class=\"token comment\">// 옵저버A: 1</span>\n<span class=\"token comment\">// 옵저버B: 1</span>\n<span class=\"token comment\">// 옵저버A: 2</span>\n<span class=\"token comment\">// 옵저버B: 2</span>\n<span class=\"token comment\">// 옵저버A: 3</span>\n<span class=\"token comment\">// 옵저버B: 3</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위의 접근 방식에서, 우리는 개념적으로 Subject를 통해 유니캐스트 옵저버블 실행을 멀티캐스트로 변환했습니다.\n이는 옵저버블 실행을 여러 옵저버에게 공유하는 유일한 방법이 Subject임을 증명합니다.</p>\n<p>몇 가지 특별한 <code class=\"language-text\">Subject</code>에는 <code class=\"language-text\">BehaviorSubject</code>, <code class=\"language-text\">ReplaySubject</code>, <code class=\"language-text\">AsyncSubject</code>가 있습니다.</p>\n<h2>멀티캐스트 옵저버블</h2>\n<p>\"멀티캐스트 옵저버블\"은 많이 구독된 Subject를 통해 알림을 전달하지만, 일반 유니캐스트 옵저버블은 단일 옵저버에게만 알림을 보냅니다.</p>\n<blockquote>\n<p>멀티캐스트된 옵저버블은 내부적으로 Subject를 사용해 여러 옵저버가 동일한 옵저버블 실행을 바라보게 합니다.</p>\n</blockquote>\n<p><code class=\"language-text\">multicast</code> 연산자의 내부적인 작동을 살펴보겠습니다.\n옵저버들은 초기 Subject를 구독하고, 그 Subject는 소스 옵저버블을 구독합니다.\n<code class=\"language-text\">observable.subscribe(subject)</code>를 사용한 위의 예제와 유사한 예제를 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> from<span class=\"token punctuation\">,</span> Subject<span class=\"token punctuation\">,</span> multicast <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> multicasted <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">multicast</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이 코드들은 내부적으로 `subject.subscribe({...})`입니다.</span>\nmulticasted<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">observerA: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmulticasted<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">observerB: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이 코드는 내부적으로 `source.subscribe(subject)`입니다.</span>\nmulticasted<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">multicast</code>는 일반 옵저버블처럼 보이지만, 구독에 있어서는 Subject처럼 작동하는 옵저버블, <code class=\"language-text\">connect()</code> 메소드를 가진 옵저버블인 <code class=\"language-text\">ConnectableObservable</code>을 반환합니다.</p>\n<p><code class=\"language-text\">connect()</code> 메소드는 옵저버블 실행이 시작되는 타이밍을 정확하게 결정하는 데 있어 매우 중요합니다.\n<code class=\"language-text\">connect()</code>가 내부적으로 <code class=\"language-text\">source.subscribe(subject)</code>를 실행하면, <code class=\"language-text\">connect()</code>가 공유된 옵저버블 실행을 취소할 수 있는 구독을 리턴하기 때문이죠.</p>\n<h3>Reference counting(참조 카운팅)</h3>\n<p><code class=\"language-text\">connect()</code>를 수동으로 호출해 구독을 다루는 건 꽤 번거롭습니다.\n일반적으로는, 첫 번째 옵저버가 도착하면 <em>자동으로</em> 연결하고, 마지막 옵저버가 구독을 취소하면 자동으로 공유된 실행을 취소하는 구현이 필요하겠죠?</p>\n<p>아래의 목록처럼 구독이 발생하는 상황을 생각해 봅시다.</p>\n<ol>\n<li>첫 번째 옵저버가 멀티캐스트 옵저버블을 구독합니다.</li>\n<li><strong>멀티캐스트 옵저버블이 연결되었습니다.</strong></li>\n<li><code class=\"language-text\">next</code> 값인 <code class=\"language-text\">0</code>이 첫 번째 옵저버에 전달됩니다.</li>\n<li>두 번째 옵저버가 멀티캐스트 옵저버블을 구독합니다.</li>\n<li><code class=\"language-text\">next</code> 값인 <code class=\"language-text\">1</code>이 첫 번째 옵저버에 전달됩니다.</li>\n<li><code class=\"language-text\">next</code> 값인 <code class=\"language-text\">1</code>이 두 번째 옵저버에 전달됩니다.</li>\n<li>첫 번째 옵저버가 멀티캐스트 옵저버블을 구독 취소합니다.</li>\n<li><code class=\"language-text\">next</code> 값인 <code class=\"language-text\">2</code>이 두 번째 옵저버에 전달됩니다.</li>\n<li>두 번째 옵저버가 멀티캐스트 옵저버블을 구독 취소합니다.</li>\n<li><strong>멀티캐스트 옵저버블에 대한 연결이 구독 취소됩니다.</strong></li>\n</ol>\n<p>이를 <code class=\"language-text\">connect()</code>를 명시적으로 호출하는 코드로 작성해 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> interval<span class=\"token punctuation\">,</span> Subject<span class=\"token punctuation\">,</span> multicast <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> <span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> multicasted <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">multicast</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> subscription1<span class=\"token punctuation\">,</span> subscription2<span class=\"token punctuation\">,</span> subscriptionConnect<span class=\"token punctuation\">;</span>\n\nsubscription1 <span class=\"token operator\">=</span> multicasted<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">observerA: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// `multicasted`의 첫 번째 구독자가 값을 소비하기 때문에,</span>\n<span class=\"token comment\">// 여기서 `connect()`를 호출해야 합니다.</span>\nsubscriptionConnect <span class=\"token operator\">=</span> multicasted<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  subscription2 <span class=\"token operator\">=</span> multicasted<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">observerB: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  subscription1<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// `multicasted`는 이 코드 이후 더 이상의 구독자가 없을 것이기 때문에,</span>\n<span class=\"token comment\">// 여기서 공유된 옵저버블 실행을 구독 취소해야 합니다.</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  subscription2<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscriptionConnect<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 공유된 옵저버블 실행을 대상으로 함</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">connect()</code>를 명시적으로 호출하지 않고 구현하려면, ConnectableObservable의 <code class=\"language-text\">refCount()</code> 메소드(참조 카운팅)를 사용할 수 있습니다.\n이 메소드는 구독자의 수를 추적하는 옵저버블을 리턴합니다.\n구독자 수가 <code class=\"language-text\">0</code>에서 <code class=\"language-text\">1</code>로 증가하면 공유된 실행을 시작하는 <code class=\"language-text\">connect()</code>를 호출하고,\n구독자 수가 <code class=\"language-text\">1</code>에서 <code class=\"language-text\">0</code>으로 감소하면 완전히 구독 취소되었다고 판단해 추가 실행을 중단합니다.</p>\n<blockquote>\n<p><code class=\"language-text\">refCount</code>는 첫 번째 구독자가 도착하면 멀티캐스트된 옵저버블의 실행을 자동으로 시작하고,\n마지막 구독가 떠나면 실행을 중지시킵니다.</p>\n</blockquote>\n<p>예시를 살펴보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> interval<span class=\"token punctuation\">,</span> Subject<span class=\"token punctuation\">,</span> multicast<span class=\"token punctuation\">,</span> refCount <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> <span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> refCounted <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">multicast</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">refCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> subscription1<span class=\"token punctuation\">,</span> subscription2<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 아래 코드는 `refCounted`의 첫 번째 구독자이기 때문에,</span>\n<span class=\"token comment\">// `connect()`를 호출합니다.</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"옵저버A 구독\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubscription1 <span class=\"token operator\">=</span> refCounted<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">옵저버A: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"옵저버B 구독\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscription2 <span class=\"token operator\">=</span> refCounted<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">옵저버B: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"옵저버A 구독 취소\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscription1<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이 코드 이후에 `refCounted`의 구독자는 더 이상 없을 것이기 때문에,</span>\n<span class=\"token comment\">// 공유된 옵저버블 실행이 멈출 것입니다.</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"옵저버B 구독 취소\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  subscription2<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 로그:</span>\n<span class=\"token comment\">// 옵저버A 구독</span>\n<span class=\"token comment\">// 옵저버A: 0</span>\n<span class=\"token comment\">// 옵저버B 구독</span>\n<span class=\"token comment\">// 옵저버A: 1</span>\n<span class=\"token comment\">// 옵저버B: 1</span>\n<span class=\"token comment\">// 옵저버A 구독 취소</span>\n<span class=\"token comment\">// 옵저버B: 2</span>\n<span class=\"token comment\">// 옵저버B 구독 취소</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">refCount()</code> 메소드는 ConnectableObservable에만 존재하며, 또 다른 ConnectableObservable이 아니라 <code class=\"language-text\">Observable</code>을 리턴합니다.</p>\n<h2>BehaviorSubject</h2>\n<p>특별한 Subject 중 하나인 <code class=\"language-text\">BehaviorSubject</code>는 \"현재 값\"이라는 개념이 있습니다.\n가장 마지막으로 배출된 값을 저장해, 새로운 옵저버가 구독할 때마다 즉시 해당 옵저버에 \"현재 값\"을 전달하죠.</p>\n<blockquote>\n<p>BehaviorSubject는 \"시간 경과에 따른 값\"을 표현할 때 유용합니다.\n생일 스트림을 Subject로 구현한다면, 나이 스트림은 BehaviorSubject로 구현합니다.</p>\n</blockquote>\n<p>다음 예제에서, BehaviorSubject는 <code class=\"language-text\">0</code>으로 초기화됩니다. 이는 첫 번째 옵저버가 구독할 때 옵저버에 전달되는 값이기도 하죠.\n두 번째 옵저버는 <code class=\"language-text\">2</code>가 방출된 이후에 구독했는데도 값 <code class=\"language-text\">2</code>를 전달받습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BehaviorSubject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BehaviorSubject</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 is the initial value</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">옵저버A: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">옵저버B: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 로그:</span>\n<span class=\"token comment\">// 옵저버A: 0</span>\n<span class=\"token comment\">// 옵저버A: 1</span>\n<span class=\"token comment\">// 옵저버A: 2</span>\n<span class=\"token comment\">// 옵저버B: 2</span>\n<span class=\"token comment\">// 옵저버A: 3</span>\n<span class=\"token comment\">// 옵저버B: 3</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>ReplaySubject</h2>\n<p><code class=\"language-text\">ReplaySubject</code>는 이전의 값을 새 구독자에게 전달할 수 있다는 점에서 <code class=\"language-text\">BehaviorSubject</code>와 비슷하지만,\n옵저버블 실행의 일부분을 <em>기록</em> 할 수 있습니다.</p>\n<blockquote>\n<p><code class=\"language-text\">ReplaySubject</code>는 옵저버블 실행에서 여러 값들을 기록해 새 구독자에게 다시 전달합니다.</p>\n</blockquote>\n<p><code class=\"language-text\">ReplaySubject</code>를 생성할 때, 몇 개의 값을 다시 전달할지 지정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ReplaySubject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReplaySubject</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 새 구독자에게 전달할 값을 3개 버퍼</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">옵저버A: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">옵저버B: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 로그:</span>\n<span class=\"token comment\">// 옵저버A: 1</span>\n<span class=\"token comment\">// 옵저버A: 2</span>\n<span class=\"token comment\">// 옵저버A: 3</span>\n<span class=\"token comment\">// 옵저버A: 4</span>\n<span class=\"token comment\">// 옵저버B: 2</span>\n<span class=\"token comment\">// 옵저버B: 3</span>\n<span class=\"token comment\">// 옵저버B: 4</span>\n<span class=\"token comment\">// 옵저버A: 5</span>\n<span class=\"token comment\">// 옵저버B: 5</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>또, 버퍼 크기 외에 밀리초 단위로 <em>시간</em> 을 지정하여 기록될 값의 수를 지정할 수 있습니다.\n아래의 예제에서는 버퍼 크기를 크게(<code class=\"language-text\">100</code>) 지정했지만, 시간 파라미터로 딱 <code class=\"language-text\">500</code> 밀리초만 지정해두었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ReplaySubject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReplaySubject</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span> <span class=\"token comment\">/* 시간 */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">옵저버A: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> subject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  subject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">옵저버B: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 로그:</span>\n<span class=\"token comment\">// 옵저버A: 1</span>\n<span class=\"token comment\">// 옵저버A: 2</span>\n<span class=\"token comment\">// 옵저버A: 3</span>\n<span class=\"token comment\">// 옵저버A: 4</span>\n<span class=\"token comment\">// 옵저버A: 5</span>\n<span class=\"token comment\">// 옵저버B: 3</span>\n<span class=\"token comment\">// 옵저버B: 4</span>\n<span class=\"token comment\">// 옵저버B: 5</span>\n<span class=\"token comment\">// 옵저버A: 6</span>\n<span class=\"token comment\">// 옵저버B: 6</span>\n<span class=\"token comment\">// ...</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>AsyncSubject</h2>\n<p>AsyncSubject는 실행이 완료되었을 때, 옵저버블 실행의 마지막 값만 옵저버에게 전달됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AsyncSubject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AsyncSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">옵저버A: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">옵저버B: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 로그:</span>\n<span class=\"token comment\">// 옵저버A: 5</span>\n<span class=\"token comment\">// 옵저버B: 5</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>AsyncSubject는 하나의 값을 전달하기 위해 <code class=\"language-text\">complete</code> 알림을 기다린다는 점에서 <a href=\"https://rxjs.dev/api/operators/last\"><code class=\"language-text\">last()</code></a> 연산자와 유사합니다.</p>\n<h2>Void Subject(리턴 없는 Subject)</h2>\n<p>가끔은 방출 된 값보다, 값이 방출되었다는 사실 자체가 더 중요한 상황이 존재합니다.</p>\n<p>아래의 코드는 1초가 지났음을 알립니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> subject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"더-미\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>더미 값을 전달하는 위의 방식은 서툴고 혼란스러워 보이네요.</p>\n<p><em>리턴 없는 Subject</em> 를 선언하면, 부적합한 값에 대한 신호만을 보낼 수 있습니다. 이벤트 자체만 중요한 거죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> subject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>전체 예제도 한 번 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Subject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Subject&lt;void>의 약칭</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1초가 지났어요!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> subject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>버전 7 이전에는, Subject 값의 기본 타입이 <code class=\"language-text\">any</code>였습니다.\n<code class=\"language-text\">Subject&lt;any></code>는 방출된 값의 타입 체킹을 비활성화하고,\n<code class=\"language-text\">Subject&lt;void></code>는 방출된 값에 실수로 접근하는 것을 방지합니다.\n이전의 동작대로 사용하고 싶다면, <code class=\"language-text\">Subject</code>를 <code class=\"language-text\">Subject&lt;any></code>로 대체하세요.</p>\n</blockquote>","frontmatter":{"title":"[번역] RxJS 공식 문서 #Subject","date":"2022.04.15","update":"2022.04.15","tags":["RxJS","Reactive Programming"],"series":"RxJS 공식 문서 번역","description":"🇰🇷 옵저버블 동생 Subject에 대해 알아보자-"},"fields":{"slug":"/rxjs-subject/","readingTime":{"minutes":15.63}}},"seriesList":{"edges":[{"node":{"id":"9da63484-acd9-5100-8fa1-bc2a3475c1ae","fields":{"slug":"/rxjs-overview/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #OVERVIEW"}}},{"node":{"id":"5d406279-db33-5aa2-a888-bfc41706a9ef","fields":{"slug":"/rxjs-observable/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Observable"}}},{"node":{"id":"f76505b5-ec0f-51d7-8acd-c753e834575e","fields":{"slug":"/rxjs-observer/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Observer"}}},{"node":{"id":"83526932-48ad-578e-9a1d-4a9044874ed7","fields":{"slug":"/rxjs-operators/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Operators"}}},{"node":{"id":"da0361fe-dbe1-579e-8fe1-99b9fed97a94","fields":{"slug":"/rxjs-subscription/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Subscription"}}},{"node":{"id":"a67ef73e-23a7-512e-8b1f-67c87b8a430d","fields":{"slug":"/rxjs-subject/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Subject"}}}]},"previous":{"fields":{"slug":"/rxjs-subscription/"},"frontmatter":{"title":"[번역] RxJS 공식 문서 #Subscription"}},"next":null},"pageContext":{"id":"a67ef73e-23a7-512e-8b1f-67c87b8a430d","series":"RxJS 공식 문서 번역","previousPostId":"da0361fe-dbe1-579e-8fe1-99b9fed97a94","nextPostId":null}},
    "staticQueryHashes": ["869547123"]}